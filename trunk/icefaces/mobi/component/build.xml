<!--
  ~ Copyright 2004-2017 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<project name="icefaces-mobi" default="lib" basedir=".">
    <description>
        ICEfaces mobi components build file.
    </description>
    <import file="../../common-tasks.xml"/>
    <!-- This property file is only used for EE builds and overrides various
         property values if it is available. -->
    <property file="../../../ee-bundle.properties"/>

    <property file="./build.properties"/>
    <property file="../build.properties"/>
    <property file="../../build.properties"/>


    <property name="lib.dir" location="../../lib"/>
    <property name="mojarra.lib.dir" location="${lib.dir}/mojarra"/>
    <property name="myfaces.lib.dir" location="${lib.dir}/myfaces"/>
    <property name="myfaces.common.dir" value="${myfaces.lib.dir}/common" />
    <property name="src" location="src"/>
    <property name="resources" location="resources"/>
    <property name="meta-include"
              location="resources/icefaces.mobi/META-INCLUDE"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>
    <property name="conf" location="conf"/>
    <property name="bin" location="bin/"/>
    <property name="exploded" location="${build}/exploded"/>
    <property name="doc" location="${build}/doc"/>
    <property name="tld.doc" location="${doc}/tld"/>
    <property name="java.doc" location="${doc}/javadoc"/>
    <property name="tld.file"
              location="${build}/exploded/META-INF/components.tld"/>
    <property name="tld.jar" location="${lib.dir}"/>
    <property name="smartsprites.basedir" location="../tools/smartsprites"/>
	<property name="mobi.theme.dir" value="org.icefaces.mobi.theme"/>

    <property name="root.dir.path" location="${build}/skins/in"/>
    <property name="output.dir.path" location="${build}/skins/out"/>
    <property name="batchminify.rootdir" location="../../ace/tools/batchminify"/>
    <property name="faces-config.host"
              location="${exploded}/META-INF/faces-config.xml"/>
    <property name="faces-config.merge.location"
              location="${meta-include}/faces-config.xml"/>
    <!-- Space or line separated list of faces-config.xml files to merge with MOBI output -->
    <property name="faces-config.merge" value="${faces-config.merge.location}"/>
	<property name="faces-config.generated.jsf" location="${exploded}/META-INF/faces-config.xml" />
	<property name="faces-config.manual" location="${meta-include}/faces-config.xml" />
	<property name="taglib.generated.jsf" location="${exploded}/META-INF/icefaces.taglib.xml" />
    <!-- Example of declaring to merge in a manual TLD file in before the generated one
    <property name="jsp.tld.merge" location="resources/icefaces.mobi/META-INCLUDE/manual.tld"/>
    -->

    <!-- Check which JSF implementation to use and set the appropriate sub-directory  -->
    <condition property="jsf.impl.dir" value="${myfaces.lib.dir}" else="${mojarra.lib.dir}">
        <isset property="myfaces"/>
    </condition>

    <condition property="javadocs.dir.default" value="${javadocs.dir}" else="./javadoc">
        <isset property="javadocs.dir" />
    </condition>
    <!-- Check which JSF version to use and set the appropriate sub-directory  -->
    <condition property="jsf.ver.dir" value="2.1" else="2.2">
        <isset property="jsf21"/>
    </condition>

    <property name="jsf.lib.dir" value="${jsf.impl.dir}/${jsf.ver.dir}" />
    <echo message="JSF lib dir: ${jsf.lib.dir}"/>

    <!-- Check if release.type is set, and if so append it after the tertiary value -->
    <condition property="version.string"
               value="${version.primary}.${version.secondary}.${version.tertiary}.${release.type}">
        <isset property="release.type"/>
    </condition>
    <property name="version.string"
              value="${version.primary}.${version.secondary}.${version.tertiary}"/>

    <property name="javadoc.title"
              value="${product} ${product.lib} Java API Documentation"/>
    <property name="javadoc.header"
              value="${product} ${product.lib} ${version.string}&lt;br&gt;Java API Documentation"/>
    <property name="tld.title"
              value="${product} ${product.lib} ${version.string} Tag Library Reference"/>


    <tstamp>
        <format property="build.time" pattern="yyyy-MM-dd hh:mm:ss"/>
    </tstamp>


    <path id="compile.run.classpath">
        <fileset dir="${jsf.lib.dir}" includes="*.jar" erroronmissingdir="false"/>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="../../ace/generator/dist" includes="*.jar"/>
        <pathelement location="${build}/exploded/org/icefaces/mobi/component"/>
        <pathelement path="../component/src/org/icefaces/mobi/component/dataview/ColumnType.java"/>
        <pathelement path="src"/>
        <pathelement path="../../ace/generator/build"/>
        <pathelement path="../component/build/meta"/>
    </path>

    <path id="javadoc.classpath">
        <fileset dir="${jsf.lib.dir}" includes="*.jar" erroronmissingdir="false"/>
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <pathelement path="../../ace/generator/build"/>
        <pathelement path="./src"/>
        <pathelement path="./build/meta"/>
        <pathelement path="./build/generated/base"/>
        <pathelement path="./build/generated-jsp/base"/>
        <pathelement path="./build/generated-interfaces"/>
        <pathelement path="./build/exploded"/>
    </path>

    <!-- include source images and css for sprite generation -->
    <macrodef name="includeresources">
        <attribute name="dir"/>
        <attribute name="name"/>
        <attribute name="skin"/>
        <sequential>
            <mkdir dir="${root.dir.path}/@{skin}"/>
            <!-- Copy all resources to the input directory for SmartSprites. -->
            <mkdir dir="${root.dir.path}/@{skin}/@{name}"/>
            <copy todir="${root.dir.path}/@{skin}/@{name}">
                <fileset dir="@{dir}" includes="**"/>
            </copy>
            <!-- At the same time, copy all resources to the SmartSprites output directory.
                   If use.sprites is set, SmartSprites will overwrite the CSS files.
               -->
            <mkdir dir="${output.dir.path}/@{skin}/@{name}"/>
            <copy todir="${output.dir.path}/@{skin}/@{name}">
                <fileset dir="@{dir}" includes="**"/>
            </copy>
        </sequential>
    </macrodef>

    <!-- check for any file modifications and call smartsprites -->
    <macrodef name="generatesprites">
        <attribute name="skin"/>
        <sequential>
            <mkdir dir="${root.dir.path}/@{skin}/base"/>
            <copy todir="${root.dir.path}/@{skin}/base"
                  file="${smartsprites.basedir}/base.css"/>
            <fileset id="@{skin}.files" dir="${root.dir.path}/@{skin}">
                <modified/>
            </fileset>
            <pathconvert property="@{skin}.modified" refid="@{skin}.files"
                         setonempty="false"/>
            <antcall target="smartsprites">
                <param name="skin" value="@{skin}"/>
            </antcall>
        </sequential>
    </macrodef>

    <macrodef name="concatskin">
        <attribute name="name"/>
        <sequential>
            <delete file="${resources}/${mobi.theme.dir}/mobi-@{name}.css"/>
            <concat destfile="${resources}/${mobi.theme.dir}/mobi-@{name}.css"
                    append="true">
                <fileset dir="${resources}/${mobi.theme.dir}/base"
                         includes="**/*.css"/>
            	<fileset file="${resources}/${mobi.theme.dir}/@{name}/theme.css" />
            </concat>
        </sequential>
    </macrodef>

    <target name="compile"
            depends="prepare, compile-meta, generate, compile-interfaces, compile-base, compile-manual, compile-support,
                     res-js-compress, res-js-no-compress, res-css-combine, res-copy"
            description="compile the source ">
    </target>

    <target name="res-js-combine">

    </target>

    <target name="res-js-compress" depends="res-js-combine,batchminify" unless="no-compress">
		<filelist id="batch">
			<file name="${resources}/org.icefaces.component.dataview/dataview.js"/>
			<file name="${resources}/org.icefaces.component.datespinner/datespinner.js"/>
			<file name="${resources}/org.icefaces.component.flipswitch/flipswitch.js"/>
			<file name="${resources}/org.icefaces.component.geolocation/geolocation.js"/>
            <file name="${resources}/org.icefaces.component.timespinner/timespinner.js"/>
            <file name="${resources}/org.icefaces.component.onlinestatus/onlinestatus.js"/>
			<file name="${resources}/org.icefaces.component.util/component.js"/>
			<file name="${resources}/org.icefaces.component.util/overthrow.js"/>
			<file name="${resources}/org.icefaces.component.viewmanager/viewmanager.js"/>
		</filelist>
		<pathconvert refid="batch" property="converted" pathsep=";"/>

        <sequential>
            <java jar="${batchminify.rootdir}/dist/batchminify.jar" fork="yes">
                <arg line="'${converted}'"/>
			</java>
        </sequential>
    </target>

    <target name="res-js-no-compress" depends="res-js-combine" if="no-compress">

    </target>

    <target name="res-css-combine">
        <available file="${resources}/icefaces.mobi/util/combined.css" property="combined.css.present"/>
        <delete file="${resources}/icefaces.mobi/util/combined.css"
                verbose="${combined.css.present}"/>
        <concat destfile="${resources}/icefaces.mobi/util/combined.css"
                force="true" fixlastline="true">
            <fileset dir="${resources}">
                <include name="icefaces.mobi/base*/*.css"/>
            </fileset>
        </concat>
    </target>

    <target name="res-copy"
            description="Copy the resources into the exploded dir ">
        <copy todir="${exploded}/META-INF">
            <fileset dir="${meta-include}">
            </fileset>
        </copy>
        <copy todir="${exploded}/META-INF/resources">
            <fileset dir="${resources}"/>
        </copy>
        <delete dir="${exploded}/META-INF/resources/icefaces.mobi/META-INCLUDE"/>
    </target>

    <target name="compile-interfaces">
        <!-- If MOBI begins using JSPs, srcdir="./src/org/icefaces/mobi/jspTag:..." -->
        <javac srcdir="${build}/generated-interfaces" destdir="${exploded}"
               debug="true" verbose="true" includeantruntime="false"
               failonerror="true" source="1.6" target="1.6">
            <classpath refid="compile.run.classpath"/>
        </javac>
    </target>

    <target name="compile-base">
        <javac srcdir="${build}/generated/base" destdir="${exploded}"
               debug="true" verbose="true" includeantruntime="false"
               failonerror="true" source="1.6" target="1.6">
            <classpath refid="compile.run.classpath"/>
        </javac>
    </target>

   <target name="compile-manual">
        <!--Have to build generated-interfaces
        simultaneously with manual.  this is responsible for all other non-generated compiling.
        -->
        <javac srcdir="${src}:${build}/generated-jsp/base" destdir="${exploded}" debug="true"
               excludes="**/*Meta.java" verbose="true" failonerror="true"
               includeantruntime="false" source="1.6" target="1.6">
            <classpath refid="compile.run.classpath"/>
        </javac>
    </target>

    <target name="compile-support">
        <javac srcdir="${build}/generated/support" destdir="${exploded}"
               debug="true" verbose="true" includeantruntime="false"
               failonerror="true" source="1.6" target="1.6">
            <classpath refid="compile.run.classpath"/>
        </javac>
    </target>

    <target name="prepare">
        <mkdir dir="${build}/meta"/>
        <mkdir dir="${build}/resources/META-INF"/>
        <mkdir dir="${exploded}"/>
        <mkdir dir="${build}/generated"/>
        <mkdir dir="${build}/generated/base"/>
        <mkdir dir="${build}/generated/support"/>
        <mkdir dir="${build}/generated-jsp"/>
        <mkdir dir="${build}/generated-jsp/base"/>
        <mkdir dir="${build}/generated-interfaces"/>
    </target>

    <target name="generator-dist">
        <ant inheritAll="false" antfile="../../ace/generator/build.xml" target="dist"/>
    </target>

    <target name="compile-meta">
        <!-- Add these to javac if getting funky compilation errors: optimize="false" verbose="true" -->
        <javac srcdir="${src}" destdir="${build}/meta" debug="true"
               verbose="true" failonerror="true"
               includes="**/*Meta.java" includeantruntime="false" source="1.6" target="1.6">
            <classpath refid="compile.run.classpath"/>
        </javac>
    </target>

    <target name="generate" depends="generator-dist">
       		<java classname="org.icefaces.ace.generator.Generator"
                     classpathref="compile.run.classpath" fork="true" classpath="${exploded}" failonerror="true">
           <!-- the short name of the library is specified as the first attribute, the namespace as the second -->
			<arg line="mobi http://www.icesoft.com/icefaces/mobile/component" />
			<sysproperty key="generator.tld.doc.display.name"
                         value="Mobile Components" />
   			<sysproperty key="generator.tld.doc.version"
                         value="${version.string}" />
            <sysproperty key="generator.build.dir"
                         value="${build}"/>
            <sysproperty key="generator.jsp.tld.merge"
                         value="${jsp.tld.merge}"/>
        </java>
        <java classname="org.icefaces.ace.generator.merge.FacesConfigMerge"
              classpathref="compile.run.classpath" fork="true" classpath="${build}">
            <arg value="${faces-config.generated.jsf}" />
            <arg value="${faces-config.manual}" />
            <arg value="${faces-config.generated.jsf}" />
        </java>

    </target>

    <target name="testMerge" description="test faces config merge">
         <java classname="org.icefaces.ace.generator.merge.FacesConfigMerge"
              classpathref="compile.run.classpath" fork="true" classpath="${build}">
            <arg value="${faces-config.generated.jsf}" />
            <arg value="${faces-config.manual}" />
            <arg value="${faces-config.generated.jsf}" />
        </java>
    </target>
    <target name="lib" depends="compile, lib-jar"
            description="Generate the icefaces-mobi.jar">
    </target>

    <target name="lib-js" depends="res-js-compress, res-js-no-compress, res-copy, lib-jar"
            description="Update the Javascript and build the icefaces-mobi.jar">
    </target>

    <target name="lib-manual" depends="compile-manual, lib-jar"
            description="Compile the manual java classes (Component, Renderer) and build the icefaces-mobi.jar">
    </target>

    <target name="lib-jar">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>

        <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
        <jar destfile="${dist}/${icefaces-mobi.lib.name}.jar" duplicate="fail">
            <metainf dir="${build}/resources/META-INF"/>

            <manifest>
                <section name="org/icefaces/mobi/">
                    <attribute name="Implementation-Title"
                               value="${product} ${product.lib}"/>
                    <attribute name="Implementation-Version"
                               value="${version.string}"/>
                    <attribute name="Build-Number"
                               value="${build.number}"/>
                    <attribute name="Build-Time"
                               value="${build.time}"/>
                    <attribute name="Implementation-Vendor"
                               value="${company}"/>
                </section>
            </manifest>

            <fileset dir="${exploded}">
                <include name="META-INF/PF-LICENSE.txt"/>
                <include name="META-INF/PF-NOTICE.txt"/>

                <include name="org/"/>
                <include name="META-INF/*"/>
                <include name="META-INF/resources/org*/**"/>
                <include name="META-INF/resources/icefaces.mobi/**"/>
            </fileset>
            <fileset dir="${src}" includes="org/icefaces/mobi/resources/"/>
        </jar>
        <copy file="${dist}/${icefaces-mobi.lib.name}.jar" todir="${lib.dir}"
              overwrite="true"/>
    </target>

    <target name="dist" depends="lib,tlddoc,javadoc-no-compile"
            description="Generate the complete ICEfaces Advanced Components distribution (lib + javadoc, tld doc)">
    </target>
    <target name="build.src.javadoc" depends="src-jar, javadoc-jar">

    </target>
    <target name="src-jar" depends="generate">
          <jar destfile="${lib.dir}/${icefaces-mobi.lib.name}-source.jar">
              <fileset dir="${src}" includes="**/*.java"/>
              <fileset dir="build/generated"  includes="**/*.java" />
              <fileset dir="build/generated-interfaces" includes="**/*.java"/>
          </jar>
      </target>
      <target name="javadoc-jar" depends="javadoc">
          <jar destfile="${lib.dir}/${icefaces-mobi.lib.name}-javadoc.jar">
              <fileset dir="${javadocs.dir.default}" includes="**/*"/>
          </jar>
      </target>
    <target name="javadoc" depends="compile" description="Generate the component JavaDoc Documentation in HTML format.">
        <antcall target="javadoc-no-compile"/>
    </target>

    <target name="javadoc-no-compile" depends="get-java-version">
        <delete dir="${javadocs.dir.default}"/>
        <mkdir dir="${javadocs.dir.default}"/>
        <javadoc destdir="${java.doc}"
                 classpathref="javadoc.classpath"
                 windowtitle="${javadoc.title}" failonerror="true"
                 bottom="Copyright ${year} ${copyright}"
                 useexternalfile="true"
                 additionalparam="${javadoc.doclint.none}">
            <fileset dir="." defaultexcludes="yes">
                <include name="src/**/*.java"/>
                <include name="build/generated/support/**/*.java"/>
                <include name="build/generated/base/**/*.java"/>
                <include name="build/generated-jsp/base/**/*.java"/>
                <include name="build/generated-interfaces/**/*.java"/>
                <exclude name="src/org/icefaces/mobi/component/**/*Meta.java"/>
                <exclude name="src/org/icefaces/apache/**"/>
            </fileset>
            <fileset dir="../../ace/generator" defaultexcludes="yes">
            </fileset>
            <header><![CDATA[${javadoc.header}]]></header>
            <footer><![CDATA[${javadoc.header}]]></footer>
            <doctitle><![CDATA[<h2>${javadoc.title}</h2>]]></doctitle>
        </javadoc>
    </target>

    <target name="clean"
            description="clean up">

        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
        <antcall target="clean-skins"/>
        <subant buildpath="${cssurlmapper.rootdir}" target="clean"/>
		<subant buildpath="${batchminify.rootdir}" target="clean"/>
        <delete file="${resources}/icefaces.mobi/util/combined.css"/>

		<delete>
			<fileset dir="${resources}" includes="**/*.c.js"/>
		</delete>
    </target>

    <target name="skins"
            description="Generate skinning resources for deployment."
            depends="cssurlmapper">

        <taskdef name="cssurlmapper" classname="${cssurlmapper.class}"
                 classpath="${cssurlmapper.rootdir}/dist/cssurlmapper.jar;${cssurlmapper.rootdir}/lib/commons-cli-1.2.jar"/>

        <!-- Declare all the resources to include -->
        <!-- 'dir' is the actual directory that contains the resources -->
        <!-- 'name' is just a working name for these resources; they will be placed under a directory with this name -->
        <!-- 'skin' is the name of the skin these resources will be part of -->
        <!--
                <includeresources
                        dir="src/org/icefaces/ace/component/datetimeentry/skins/sam"
                        name="calendar" skin="sam"/>
        -->

        <!--
                <includeresources
                        dir="src/org/icefaces/ace/component/datetimeentry/skins/rime"
                        name="calendar" skin="rime"/>
        -->
    	
        <!-- Process sprites, if use.sprites is set -->
        <antcall target="sprites"/>
    	
    	<!-- Copy all resources to the skins resource library -->
        <copy todir="${resources}/${mobi.theme.dir}">
            <fileset dir="${output.dir.path}" includes="**"/>
        </copy>

        <!-- Map all URLs to the JSF format, CSS files already in the skins resource library will be overwritten -->
        <cssurlmapper libraryname="${mobi.theme.dir}" inputdir="${output.dir.path}"
                      outputdir="${resources}/${mobi.theme.dir}"/>

        <!-- Generate a single CSS file per skin -->
        <concatskin name="light"/>
        <concatskin name="dark"/>

    </target>

    <target name="clean-skins"
            description="Clean all generated skinning resources.">

        <!-- Delete temporary directories -->
        <delete dir="${root.dir.path}"/>
        <delete dir="${output.dir.path}"/>

        <!-- Delete the entire skins resource library -->
        <delete dir="${resources}/${mobi.theme.dir}"/>

        <delete file="cache.properties"/>

    </target>

    <target name="sprites" description="Prepare files to generate sprites."
            if="use.sprites">

        <available file="build.properties"
                   property="smartsprites.properties.available"/>
        <fail unless="smartsprites.properties.available">

            Please provide SmartSprite parameters in a 'build.properties' file.

        </fail>

        <property file="build.properties"/>

        <taskdef resource="smartsprites.xml">
            <classpath>
                <fileset dir="${smartsprites.basedir}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <!-- Specify the names of the skins to process, based on the resources included above. -->
    	<generatesprites skin="base"/>
    	<generatesprites skin="dark"/>
        <generatesprites skin="light"/>

    </target>

    <target name="smartsprites" description="Performs CSS sprite processing."
            if="${skin}.modified">

        <smartsprites rootdir="${root.dir.path}/${skin}"
                      documentrootdir="${document.root.dir.path}"
                      outputdir="${output.dir.path}/${skin}"
                      cssfileencoding="${css.file.encoding}"
                      cssfilesuffix="${css.file.suffix}"
                      loglevel="${log.level}"
                      spritepngdepth="${sprite.png.depth}"
                      spritepngie6="${sprite.png.ie6}"/>
    </target>

    <target name="cssurlmapper" description="Build the CSS URL mapping tool.">
        <subant buildpath="${cssurlmapper.rootdir}" target="compile"/>
    </target>

    <target name="batchminify" description="Build the batch minify tool.">
        <subant buildpath="${batchminify.rootdir}" target="compile"/>
    </target>

    <macrodef name="gen.tld.doc">
        <attribute name="tld.file"/>
        <sequential>
            <delete dir="${tld.doc}"/>
            <mkdir dir="${tld.doc}"/>
            <java jar="${tld.jar}/tlddoc.jar" fork="true" failonerror="true">
                <arg value="-d"/>
                <arg value="${tld.doc}"/>
                <arg value="-doctitle"/>
                <arg value="${tld.title}"/>
                <arg value="-windowtitle"/>
                <arg value="${tld.title}"/>
                <arg value="@{tld.file}"/>
            </java>
        </sequential>
    </macrodef>

    <target name="tlddoc"
            description="Generate the component TLD Documentation in HTML format.">
        <gen.tld.doc tld.file="${tld.file}"/>
    </target>
</project>
