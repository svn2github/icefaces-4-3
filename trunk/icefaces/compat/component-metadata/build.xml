<!--
  ~ Copyright 2004-2013 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<project name="component-metadata" default="jar" basedir=".">
    <property environment="env" />

	<property file="./build.properties"/>
	<property file="../build.properties"/>
    <property file="../../build.properties"/>

    <property name="maven.build.output" value="target/classes" />
    <property name="project.build.directory" value="target" />
    <property name="maven.build.directory" value="target" />    
    <property name="maven.test.reports" value="${maven.build.directory}/test-reports" />
    <property name="maven.test.output" value="target/test-classes" />
    <property name="lib.dir" location="../../lib" />
    <property name="mojarra.lib.dir" location="${lib.dir}/mojarra"/>
    <property name="myfaces.lib.dir" location="${lib.dir}/myfaces"/>
    <property name="myfaces.common.dir" value="${myfaces.lib.dir}/common" />
    <property name="compat.lib.dir" location="${lib.dir}/compat" />
    <property name="project.title" value="ICEfaces components" />
    <property name="project.version" value="${version.primary}.${version.secondary}.${version.tertiary}" />
    <property name="maven.build.final.name" value="component-metadata-${project.version}" />
    <property name="project.package" value="com.icesoft" />
    <property name="project.artifact" value="component" />
    <property name="project.artifact.version" value="icefaces-webui" />
    
    <!-- todo: change package name later -->
    <property name="project.taglib.package" value="${project.package}.faces.component" />
    <property name="project.taglib.prefix" value="ice" />
    <property name="project.taglib.uri" value="http://www.icesoft.com/icefaces/component" />
    <property name="project.tld.fileName" value="icefaces_component" />

    <!-- Check which JSF implementation to use and set the appropriate sub-directory  -->
    <condition property="jsf.impl.dir" value="${myfaces.lib.dir}" else="${mojarra.lib.dir}">
        <isset property="myfaces"/>
    </condition>

    <!-- Check which JSF version to use and set the appropriate sub-directory  -->
    <condition property="jsf.ver.dir" value="2.2" else="2.1">
        <isset property="jsf22"/>
    </condition>

    <property name="jsf.lib.dir" value="${jsf.impl.dir}/${jsf.ver.dir}" />
    <echo message="JSF lib dir: ${jsf.lib.dir}"/>

    <path id="build.classpath">
        <pathelement location="${maven.build.output}" />
        <fileset dir="${jsf.lib.dir}" includes="*.jar" />
        <fileset dir="${lib.dir}" includes="*.jar"  />
        <fileset dir="${compat.lib.dir}" includes="*.jar" />
    </path>

    <!-- Keeping a specific set of paths for some of the generator tasks because
         they rely on Mojarra specific files -->
    <path id="build.generator.classpath">
        <pathelement location="${maven.build.output}" />
        <fileset dir="${mojarra.lib.dir}/2.1" includes="*.jar" />
        <fileset dir="${lib.dir}" includes="*.jar"  />
        <fileset dir="${compat.lib.dir}" includes="*.jar" />
    </path>

    <target name="clean" description="Clean the output directory">
        <delete dir="${maven.build.directory}" />
    </target>

    <target name="conf-changed" >
        <uptodate property="conf-uptodate" targetfile="${maven.build.directory}/generated-sources/created">
            <srcfiles dir="${maven.build.directory}/classes/conf">
                <include name="**/*.xml" />
            </srcfiles>
        </uptodate>
    </target>
    
    <target name="compile" description="Compile the code">
        <echo message="---------- ${project.title} ----------" />
        <filter token="title" value="${project.title}" />
        <filter token="package" value="${project.package}" />
        <filter token="version" value="${project.version}" />
        <filter token="project-artifact" value="${project.artifact}" />
        <filter token="taglib-prefix" value="${project.taglib.prefix}" />
        <filter token="taglib-uri" value="${project.taglib.uri}" />
        <mkdir dir="${maven.build.output}" />
        <copy file="src/main/java/com/icesoft/metadata/generators/TLDGenerator.java"
              todir="${project.build.directory}" overwrite="true" preservelastmodified="true"/>
        <replace file="src/main/java/com/icesoft/metadata/generators/TLDGenerator.java">
            <replacefilter token="@tlib-version@" value="${project.version}"/>
        </replace>
        <javac destdir="${maven.build.output}" excludes="**/package.html" debug="true" deprecation="true" optimize="false" includeantruntime="false">
            <src>
                <pathelement location="src/main/java" />
            </src>
            <classpath refid="build.classpath" />
        </javac>
        <move file="${project.build.directory}/TLDGenerator.java"
              todir="src/main/java/com/icesoft/metadata/generators" overwrite="true" preservelastmodified="true"/>
        <copy todir="${maven.build.output}" filtering="on">
            <fileset dir="src/main/resources" />
        </copy>        
    </target>    
       
    <!-- generator -->
    <target name="generator" description="code generator" depends="conf-changed" unless="conf-uptodate">
        <!-- validate meatdata xml file -->
        <java classname="com.icesoft.faces.metadata.TestValidMetadataXML" failonerror="true" fork="true">
            <classpath refid="build.generator.classpath" />
        </java>
        
        <!-- generate tag class -->
        <java classname="com.icesoft.metadata.generators.MetadataGenerator" failonerror="true" fork="true">
            <arg line="--tlClass" />
            <classpath refid="build.generator.classpath" />
        </java>
        
        <!-- generate tld file -->
        <java classname="com.icesoft.metadata.generators.MetadataGenerator" failonerror="true" fork="true">
            <arg line="--tlDescriptor" />
            <classpath refid="build.generator.classpath" />
        </java>                
        
        <!-- generate test beaninfo -->
        <java classname="com.icesoft.metadata.generators.MetadataGenerator" failonerror="true" fork="true">
            <arg line="--cpTestBeanInfo" />
            <classpath refid="build.generator.classpath" />
        </java>
        
        <!-- generate base componenent -->
        <java classname="com.icesoft.metadata.generators.MetadataGenerator" failonerror="true" fork="true">
            <arg line="--cpClassBase" />
            <classpath refid="build.generator.classpath" />
        </java>
        
        <!-- generate IDE beaninfo base -->
        <java classname="com.icesoft.metadata.generators.MetadataGenerator" failonerror="true" fork="true">
            <arg line="--cpBeanInfoBase" />
            <classpath refid="build.generator.classpath" />
        </java>

        <!-- generate IDE beaninfo base -->
        <java classname="com.icesoft.jsfmeta.templates.TemplateMetadataGenerator" failonerror="true" fork="true">
            <arg line="--templateGenJsf11" />
            <classpath refid="build.generator.classpath" />
        </java>

        <touch file="${project.build.directory}/generated-sources/created" />
    </target>
    
    <target name="jar" depends="compile,generator,test" description="Clean the JAR">
        <jar jarfile="${maven.build.directory}/${maven.build.final.name}.jar" basedir="${maven.build.output}" excludes="**/package.html" />
    </target>
    
    <target name="compile-tests" depends="junit-present, compile" description="Compile the test code" if="junit.present">
        <mkdir dir="${maven.test.output}" />
        <javac destdir="${maven.test.output}" failonerror="true" excludes="**/package.html" debug="true" deprecation="true" optimize="false" includeantruntime="false">
            <src>
                <pathelement location="src/test/java" />
            </src>
            <classpath>
                <path refid="build.classpath" />
                <pathelement location="${maven.build.output}" />
            </classpath>
        </javac>
    </target>
    
    <target name="test" depends="junit-present, compile-tests" if="junit.present" description="Run the test cases">
        <mkdir dir="${maven.test.reports}" />
        <xmlvalidate file="${project.build.directory}/generated-sources/tld/icefaces_component.tld" failonerror="true">
            <dtd publicId="-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"
                 location="src/main/resources/conf/dtd/web-jsptaglibrary_1_2.dtd"/>
        </xmlvalidate>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
            <sysproperty key="basedir" value="." />
            <formatter type="plain" />
            <classpath>
                <path refid="build.classpath" />
                <pathelement location="${maven.build.output}" />
                <pathelement location="${maven.test.output}" />
            </classpath>
            <batchtest todir="${maven.test.reports}">
                <fileset dir="src/test/java">
                    <include name="**/*Test.java" />
                    <exclude name="**/*Abstract*Test.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>
    
    <target name="test-junit-present" unless="skip.test">
        <available classname="junit.framework.Test" property="junit.present" />
    </target>
    <target name="junit-present" depends="test-junit-present" unless="junit.present">
        <echo>================================= WARNING ================================</echo>
        <echo> Property 'skip.test' set OR </echo>
        <echo> Junit isn&apos;t present in your $ANT_HOME/lib directory. Tests not executed. </echo>
        <echo>==========================================================================</echo>
    </target>
</project>
