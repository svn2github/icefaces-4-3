<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2004-2013 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<renderer>
	<description>
         <![CDATA[ <p>The jsEventListener component allows you to capture javascript 
          events and optionally sends a notification to server and fire an action 
          event.<p>
          <p>
          For example if you want to fire an action event in response of onchange event
          on the client. 
         <pre>
       &lt;ice:jsEventListener events="change"  actionListener="#{textFields.eventListener}"&gt; 
           &lt;h:inputText /&gt;
       &lt;/ice:jsEventListener&gt;
             </pre>
             </p>
             <p> 
              On server side you get the following parameters, that can helps to 
              evaluate further on server side.
              <br/>
              
          <ul>      
        <li>ice.event.target</li>
        <li>ice.event.captured</li>
        <li>ice.event.shift</li>
        <li>ice.event.keycode</li>
        <li>ice.event.type</li>
        <li>ice.focus</li>
        <li>ice.submit.partial</li>
        <li>ice.event.alt</li>
        <li>ice.event.ctrl</li>
        <li>ice.event.shift</li>
        <li>ice.event.meta</li>
        <li>ice.event.x</li>        
        <li>ice.event.y</li>   
        <li>ice.event.left</li>
        <li>ice.event.right</li>               
             </ul>      
         
         Note: Some of the above parameters are specific to the element type. 
         So first you will have to check if the patameter is available in request map.
         </p>
         <p>
         Another example to use html input buttons to fire an action event and 
         navigate to the page according to the choice. 
         <pre>   
    &lt;ice:jsEventListener events="click"  action="#{bean.eventAction}"&gt; 
        &lt;input type="button" id="continue" value="Continue"/&gt;
        &lt;input type="button" id="cancel" value="Cancel"/&gt;  
    &lt;/ice:jsEventListener&gt;	         

        public String eventAction() {
            Map parameter = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
            if ("continue".equals(parameter.get("ice.event.target"))) {
                return "continue";
            }else if ("cancel".equals(parameter.get("ice.event.target"))) {
                return "cancel";
            } 
            return "noaction";
        }
            </pre>
    <b>Note:</b> For above example navigation rule needs to be defined in faces-config.xml.
    </p>
    <p> 
    <b>Event Filtering:</b> <br/>
    In above examples events was not filtered and you don't want to capture event 
    like keydown without filtering it. To filter events you can defin a callback 
    using handler attribute on the component. Let say if you are interested
    in only ESC key and Shift + N key:
    <pre>
    &lt;ice:jsEventListener events="keydown" handler="keydownFilter" actionListener="#{bean.doSomthing}"&gt; 
        &lt;h:inputText /&gt;
    &lt;/ice:jsEventListener&gt; 
    <br/>
    //now lets define keydownFilter
    &lt;script&gt;
        //this handler will be invoked by the ICEFaces along with the event
        //wrapped in the prototype's event. To find out what methods 
        //available on event please see prototype event API. 
        
        function keydownFilter(event) {
            var ESC = 27;
            var N = 78;
            switch(event.keyCode) {
                case ESC:
                    //proceed and do a submit    
                    return true;
                case N:
                    if(event.shiftKey) {
                        //optionally stop bubbling if required
                        Event.stop(event);
                        //proceed and do a submit 
                        return true;
                    }   
            }
            //don't invoke a submit
            return false;
        }
     &lt;/script&gt;
    </pre>
    </p>
    
    You can capture more than one events using "," separated values (e.g)
    <pre>
    &lt;ice:jsEventListener events="keydown, keyup" handler="eventFilter" actionListener="#{bean.doSomthing}"> 
        &lt;h:inputText /&gt;
    &lt;/ice:jsEventListener> 
      </pre>
    As there is only one handler for both events, so you will have to check for 
    the event.type to distigushe between them or if you want to use a separate handlers you can use nested jsEventListener component (e.g.)
    <pre>
    &lt;ice:jsEventListener events="keydown" handler="keydownFilter" actionListener="#{bean.doSomthing}"&gt; 
        &lt;ice:jsEventListener events="keyup" handler="keyupFilter" actionListener="#{bean.doSomthing}"&gt;     
             &lt;h:inputText /&gt; 
         &lt;/ice:jsEventListener&gt;        
    &lt;/ice:jsEventListener&gt;     
    </pre>
    There can be many uses cases, please explore and let others know. <br/>
    
    <b>Note:</b> The ice:jsEventListener based on the event bubbling, so it can
    capture events as far as its children bubbling up the events.
   ]]>
  </description>
	<component-family>javax.faces.Command</component-family>
	<renderer-type>com.icesoft.faces.JSEventListenerRenderer</renderer-type>
 
	<renderer-extension>
		<instance-name>jsEventListener</instance-name>
		<is-container>true</is-container>
		<renders-children>true</renders-children>
		<tag-name>jsEventListener</tag-name>
		<taglib-prefix>@taglib-prefix@</taglib-prefix>
		<taglib-uri>@taglib-uri@</taglib-uri>
	</renderer-extension>

</renderer>
