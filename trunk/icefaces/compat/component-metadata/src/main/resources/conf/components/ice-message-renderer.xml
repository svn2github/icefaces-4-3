<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2004-2013 ICEsoft Technologies Canada Corp.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the
  ~ License. You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an "AS
  ~ IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
  ~ express or implied. See the License for the specific language
  ~ governing permissions and limitations under the License.
  -->

<renderer>
	<description><![CDATA[<p>Render a single message for a specific component.</p><p>Set-up for Rendering</p><ul><p>Obtain the "summary" and "detail" properties from
                  <code>UIMessage</code> component.  If not present, keep the
                  empty string as the value, respectively.  Obtain the first
                  <code>FacesMessage</code> to render from the component, using
                  the "for" property of the <code>UIMessage</code>.  This will be
                  the only message we render.  Obtain the severity style for this
                  message.  If the severity of the message is
                  <code>FacesMessage.SEVERITY_INFO</code>, the severity style
                  comes from the value of the "infoStyle" attribute.  If the
                  severity of the message is
                  <code>FacesMessage.SEVERITY_WARN</code>, the severity style
                  comes from the value of the "warnStyle" attribute, and so on for
                  each of the severities, <code>INFO, WARN, ERROR</code> and
                  <code>FATAL</code>.  The same rules apply for obtaining the
                  severity style class, but instead of "infoStyle, warnStyle", etc
                  use "infoClass, warnClass", etc.  Obtain the "style",
                  "styleClass" and "layout" attributes from the
                  <code>UIMessage</code> component.  If we have a "style"
                  attribute and a severity style attribute, use the severity style
                  attribute as the value of the "style" attribute.  If we have no
                  "style" attribute, but do have a severity style, use the
                  severity style as the value of the "style" attribute.  The same
                  precedence rules apply for the style class.</p></ul><p>Rendering</p><ul><p>For the message renderer, we only render
                one row, for the first message.  For the messages renderer, we
                render as many rows as we have messages.  If either of the "style"
                or "styleClass" attributes has a non-null value (as determined
                above), render a "span" element, outputting the value of the
                "style" attribute as the the value of the "style" attribute, and
                outputting the value of the "styleClass" attribute as the value of
                the "class" attribute on the "span" element.  If the
                <code>UIMessage</code> has a "tooltip" attribute with the value of
                "true", and the <code>UIMessage</code> has "showSummary" and
                "showDetail" properties with the value "true", if we haven't
                already written out the "span", output the "summary" as the value
                of the "title" attribute on the "span".  If we haven't already
                written out a "title" attribute, and "showSummary" is true, output
                the summary.  If "showDetail" is true, output the detail.  Close
                out the span if necessary.</p></ul>]]></description>
	<component-family>javax.faces.Message</component-family>

	<renderer-type>com.icesoft.faces.Message</renderer-type>

	<renderer-extension>
		<instance-name>message</instance-name>
		<is-container>false</is-container>
		<renders-children>false</renders-children>
		<tag-name>message</tag-name>
		<taglib-prefix>@taglib-prefix@</taglib-prefix>
		<taglib-uri>@taglib-uri@</taglib-uri>
	</renderer-extension>

</renderer>
