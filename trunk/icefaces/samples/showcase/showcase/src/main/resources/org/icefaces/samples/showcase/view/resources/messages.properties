#
# Copyright 2004-2014 ICEsoft Technologies Canada Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#

showcase.title = ICEfaces Showcase
menu.ace.title = ACE Components
menu.mobi.title = MOBI Components

menu.ace.tooltip = ACE Components Showcase
menu.mobi.tooltip = MOBI Components Showcase

################################################################################
# ICEfaces Advanced Components (ACE)                                           #
################################################################################
### ACE - Grouping
menu.ace.group.ajax.title = Ajax
menu.ace.group.input.title = Input
menu.ace.group.buttons.title = Buttons
menu.ace.group.menus.title = Menus
menu.ace.group.selection.title = Selection
menu.ace.group.dialogs.title = Dialogs
menu.ace.group.containers.title = Containers
menu.ace.group.file.title = File
menu.ace.group.messages.title = Messages
menu.ace.group.datatable.title = DataTable
menu.ace.group.charts.title = Charts
menu.ace.group.mapping.title = Mapping
menu.ace.group.media.title = Media
menu.ace.group.misc.title = Misc.

### ACE - Overview
menu.ace.aceSuiteOverview.title = ACE Overview
menu.ace.aceSuiteOverview.subMenu.title = Examples
menu.ace.aceSuiteOverview.subMenu.main = Overview
# Overview
example.ace.aceSuiteOverview.title = ACE Overview
example.ace.aceSuiteOverview.description = <h2>What are the ACE Components?</h2><p>The ACE Components (ICEfaces Advanced Components) are the next-generation of open source ICEfaces components. Featuring over 40 components including the industry-leading ace:dataTable, the ACE Components utilize a blend of server-side and client-based rendering techniques to provide a rich, responsive user-experience with reduced network and server-processing requirements.</p><br/><p>Key features of the ACE Components include:<br/><ul><li><b>&#187;</b> Leverage powerful JavaScript components from leading 3rd-party libraries, such as jQuery, while shielding ICEfaces application developers from having to learn/use JavaScript directly.</li><li><b>&#187;</b> Support extensive client-side functionality to improve component richness, responsiveness, and scalability.</li><li><b>&#187;</b> Provide a flexible and consistent approach to UI theming/skinning across all components, based on jQuery ThemeRoller themes.</li></ul></p><br/><p>The ACE Components are authored using the ICEfaces Advanced Component Environment, which implements a consistent approach to component authoring, meta-data management, and automates common component development tasks and optimizations.</p><h2>When should I use the ACE Components?</h2><p>The ACE Components are ideally suited to ICEfaces projects that are able to leverage the power of modern browsers to provide a richer, more dynamic and responsive user-interface. The ACE Components provide a higher degree of client-side rendering, behaviours, and Ajax transaction flexibility. This reduces both the number and size of render-cycles required for typical interactions, and provides a highly responsive user-interface. In future ICEfaces releases, new component features will be implemented primarily on the ACE component platform, therefore the ACE Components will continue to evolve rapidly.</p><h2>How are the ACE Components Licensed?</h2><p>The ACE Components are made available under the Apache License Version 2 open source License. All code modifications and component enhancements are free for developers to use, distribute and modify.</p><h2>How can I find out more about the components?</h2><p>The component samples included in this ICEfaces Showcase application include source code for each sample, located at the bottom of each page. In addition, links to technical documentation and the component TLD documentation are provided on the right-hand side menu on the header bar for each sample.</p><br><p>The complete source code for this sample application is included in the <a href="http://www.icesoft.org/java/downloads/icefaces-downloads.jsf" style="text-decoration: underline;" target="_blank" >ICEfaces release bundle</a>.</p>

### ACE - Accordion Panel
menu.ace.accordionpanel.title = ace:accordion
menu.ace.accordionpanel.subMenu.title = Examples
menu.ace.accordionpanel.subMenu.main = Overview
menu.ace.accordionpanel.subMenu.dynamic = Pane Change
menu.ace.accordionpanel.subMenu.effect = Toggle Effect
# Overview
example.ace.accordionpanel.title = ace:accordion - Overview
example.ace.accordionpanel.description = <p>The <b>&lt;ace:accordion&gt;</b> component is a container element with collapsible / expandable panes stacked vertically. Once placed on a page it can have any number of tabs, each having its own content. Click on any of the three headers below to expand the pane and view its associated content.</p>
# Dynamic
example.ace.accordionpanel.dynamic.title = ace:accordion - Pane Change Listener Example
example.ace.accordionpanel.dynamic.description = <p>A paneChangeListener can be attached to the <b>&lt;ace:accordion&gt;</b> component and used in scenarios where server side logic needs to be executed when a user switches between tabs. A component update command can be bundled with paneChangeListener to partially update the page once an AJAX call has been completed. To view the demo, click on any of the tab\u2019s below. The pane selection is identified to the application logic on the server which then mirrors back the selection details by updating the text field below the tabs.</p>
# Effect
example.ace.accordionpanel.effect.title = ace:accordion - Animation Effect Example
example.ace.accordionpanel.effect.description = <p>Animation effects can be added to the accordion panel which will be activated on tab expansion and close. Hover over the tabs below with the mouse to view the animation results.</p>

### ACE - Animation Panel
menu.ace.animation.title = ace:animation
menu.ace.animation.subMenu.title = Examples
menu.ace.animation.subMenu.main = Overview
# Overview
example.ace.animation.title = ace:animation - Overview
example.ace.animation.description = <p>ICEFaces provides an animation system using attachable behavior, which allows developers to add various animation(s) to many of the ACE components. Click on the panels below in order to view the associated animation effect.</p>

### ACE - Ajax
menu.ace.ajax.title = ace:ajax
menu.ace.ajax.subMenu.title = Examples
menu.ace.ajax.subMenu.main = Overview
menu.ace.ajax.subMenu.advanced = Advanced
menu.ace.ajax.subMenu.callbacks = Client-side Callbacks
# Overview
example.ace.ajax.title = ace:ajax - Overview
example.ace.ajax.description = <p>The <b>&lt;ace:ajax&gt;</b> component </p>
# Advanced
example.ace.ajax.advanced.title = ace:ajax - Advanced Example
example.ace.ajax.advanced.description = <p>...</p>
# Client-side Callbacks
example.ace.ajax.callbacks.title = ace:ajax - Client-side Callbacks Example
example.ace.ajax.callbacks.description = <p>...</p>

### ACE - AudioPlayer
menu.ace.audioPlayer.title = ace:audioPlayer
menu.ace.audioPlayer.subMenu.title = Examples
menu.ace.audioPlayer.subMenu.main = Overview
# Overview
example.ace.audioPlayer.title = ace:audioPlayer - Overview
example.ace.audioPlayer.description = <p>The <b>&lt;ace:audioPlayer&gt;</b> </p>

### ACE - AutoCompleteEntry
menu.ace.autocompleteentry.title = ace:autoCompleteEntry
menu.ace.autocompleteentry.subMenu.main = Overview
menu.ace.autocompleteentry.subMenu.title = Example
menu.ace.autocompleteentry.subMenu.select = Select Items
menu.ace.autocompleteentry.subMenu.facet = Custom Facet
menu.ace.autocompleteentry.subMenu.match = Match Criteria
menu.ace.autocompleteentry.subMenu.rows = Displayed Rows
menu.ace.autocompleteentry.subMenu.lazy = Lazy Loading
menu.ace.autocompleteentry.subMenu.label = Label Position
menu.ace.autocompleteentry.subMenu.indicator = Indicator Text
menu.ace.autocompleteentry.subMenu.reqStyle = Required Styling
# Overview
example.ace.autocompleteentry.title = ace:autoCompleteEntry - Overview
example.ace.autocompleteentry.description = <p>The <b>&lt;ace:autoCompleteEntry&gt;</b> component is a text input component that displays a list of possible valid options as the user types.</p>
# Select Items
example.ace.autocompleteentry.select.title = ace:autoCompleteEntry - Select Items
example.ace.autocompleteentry.select.description = <p>The autoCompleteEntry component can define the selectable items using standard a f:selectItems component pointing to a list of SelectItem objects. This example demonstrates that using a list of cities.</p>
# Facet
example.ace.autocompleteentry.facet.title = ace:autoCompleteEntry - Custom Facet
example.ace.autocompleteentry.facet.description = <p>The autoCompleteEntry component can define the selectable items using a custom facet with any desired formatting. In this example we use an image icon, the city and country name all defined in a styled custom facet.</p>
# Match Criteria
example.ace.autocompleteentry.match.title = ace:autoCompleteEntry - Match Criteria
example.ace.autocompleteentry.match.description = <p>The autoCompleteEntry component can define how it will attempt to match and filter user entry in relation to the list of items.</p>
# Displayed Rows
example.ace.autocompleteentry.rows.title = ace:autoCompleteEntry - Displayed Rows
example.ace.autocompleteentry.rows.description = <p>The autoCompleteEntry component can customize how many rows to display in the dropdown of filtered items.</p>
# Lazy Loading
example.ace.autocompleteentry.lazy.title = ace:autoCompleteEntry - Lazy Loading
example.ace.autocompleteentry.lazy.description = <p>This example shows how to load the possible options lazily from an external data source (e.g. a database) and perform some custom filtering. The application checks the latitudes of the cities and only shows those which lie between the tropics (roughly -23.0 to 23.0), so American and Canadian cities will not appear in the list of possible values.</p>
# Label Position
example.ace.autocompleteentry.label.title = ace:autoCompleteEntry - Label Position
example.ace.autocompleteentry.label.description = <p>This example shows to render, customize, and position an inline label for the autoCompleteEntry component.</p>
# Indicator Text
example.ace.autocompleteentry.indicator.title = ace:autoCompleteEntry - Indicator Text
example.ace.autocompleteentry.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.autocompleteentry.reqStyle.title = ace:autoCompleteEntry - Required Styling
example.ace.autocompleteentry.reqStyle.description = <p>This example shows how the autoCompleteEntry field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - BreadcrumbMenu
menu.ace.breadcrumbmenu.title = ace:breadcrumbMenu
menu.ace.breadcrumbmenu.submenu.main = Overview
# Overview
example.ace.breadcrumbmenu.title = ace:breadcrumbMenu - Overview
example.ace.breadcrumbmenu.description = <p>The <b>&lt;ace:breadcrumbMenu&gt;</b> component is a horizontal bar of breadcrumb menu items. The crumbs are encoded by child menuItem tags. The menu items can be encoded inline or dynamically using a menu model.</p>

### ACE - CheckBoxButton
menu.ace.checkboxButton.title = ace:checkboxButton
menu.ace.checkboxButton.subMenu.title = Examples
menu.ace.checkboxButton.subMenu.main = Overview
menu.ace.checkboxButton.subMenu.custom = Custom Style
# Overview
example.ace.checkboxButton.title = ace:checkboxButton - Overview
example.ace.checkboxButton.description = <p>The <b>&lt;ace:checkboxButton&gt;</b> component is a simple UI button control for toggling boolean input values (ie. Select / De-Select). Click on the box below to toggle button select / deselect functionality. In this particular demo, server based application code reflects button state back to the user through the text located below the button.</p>
# Custom
example.ace.checkboxButton.custom.title = ace:checkboxButton - Custom Style
example.ace.checkboxButton.custom.description = <p>Below is an example of a  <b>&lt;ace:checkboxButton&gt;</b> component styling itself using custom state images.</p>

### ACE - RadioButton
menu.ace.radioButton.title = ace:radioButton
menu.ace.radioButton.subMenu.title = Examples
menu.ace.radioButton.subMenu.main = Overview
menu.ace.radioButton.subMenu.custom = Custom Style
# Overview
example.ace.radioButton.title = ace:radioButton - Overview
example.ace.radioButton.description = <p>The <b>&lt;ace:radioButton&gt;</b> component is a simple UI button control for toggling boolean input values (ie. Select / De-Select). Click on the box below to toggle button select / deselect functionality. In this particular demo, server based application code reflects button state back to the user through the text located below the button.</p>
# Custom
example.ace.radioButton.custom.title = ace:radioButton - Custom Style
example.ace.radioButton.custom.description = <p>Below is an example of a  <b>&lt;ace:radioButton&gt;</b> component styling itself using custom state images.</p>

### ACE - buttonGroup
menu.ace.buttonGroup.title = ace:buttonGroup
menu.ace.buttonGroup.subMenu.title = Example
menu.ace.buttonGroup.subMenu.main = Overview
# Overview
example.ace.buttonGroup.title = ace:buttonGroup - Overview
example.ace.buttonGroup.description = <p>The <b>&lt;ace:buttonGroup&gt;</b> component is a container for ace:checkboxButton and ace:radioButton components that enforces mutual exclusivity between buttons in the group so that only one button in the group can be selected at one time. Selecting a new button deselects the previously selected one.</p>

### ACE - ComboBox
menu.ace.combobox.title = ace:comboBox
menu.ace.combobox.subMenu.main = Overview
menu.ace.combobox.subMenu.title = Example
menu.ace.combobox.subMenu.facet = Facet Rendering
menu.ace.combobox.subMenu.filtering = Filtering
menu.ace.combobox.subMenu.label = Label Position
menu.ace.combobox.subMenu.indicator = Indicator Text
menu.ace.combobox.subMenu.reqStyle = Required Styling
# Overview
example.ace.combobox.title = ace:comboBox - Overview
example.ace.combobox.description = <p>The <b>&lt;ace:comboBox&gt;</b> component allows users to select a value from a number of given options, while also allowing them to enter a custom value in the text field. It provides client-side autocomplete functionality as the user types to suggest possible options.
example.ace.combobox.facet.title = ace:comboBox - Facet Rendering
example.ace.combobox.facet.description = <p>The <b>&lt;ace:comboBox&gt;</b> component allows developers to render custom entries by using nested components.
example.ace.combobox.filtering.title = ace:comboBox - Filtering
example.ace.combobox.filtering.description = <p>The <b>&lt;ace:comboBox&gt;</b> component also supports client-side filtering.
# Label Position
example.ace.combobox.label.title = ace:comboBox - Label Position
example.ace.combobox.label.description = <p>This example shows how to render, customize, and position an inline label for the comboBox component.</p>
# Indicator Text
example.ace.combobox.indicator.title = ace:comboBox - Indicator Text
example.ace.combobox.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.combobox.reqStyle.title = ace:comboBox - Required Styling
example.ace.combobox.reqStyle.description = <p>This example shows how the comboBox field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - Confirm Dialog
menu.ace.confirmationdialog.title = ace:confirmationDialog
menu.ace.confirmationdialog.subMenu.title = Examples
menu.ace.confirmationdialog.subMenu.main = Overview
menu.ace.confirmationdialog.subMenu.modal = Modal
menu.ace.confirmationdialog.subMenu.effect = Effect
# Overview
example.ace.confirmationdialog.title = ace:confirmationDialog - Overview
example.ace.confirmationdialog.description = <p>The <b>&lt;ace:confirmationDialog&gt;</b> component generates a popup dialog window with confirmation input. Client side APIs, show() and hide() functions, can be used to display and close the dialog. These functions can be called from other components, such as the commandButton, commandLink, menuitem etc. A number of attributes are available to the developer to allow them to change message, actions, dimensions etc. To demonstrate the component click on the Save button below.</p>
# Modal
example.ace.confirmationdialog.modal.title = ace:confirmationDialog - Modal Confirmation Example
example.ace.confirmationdialog.modal.description = <p>If the modal attribute of the <b>&lt;ace:confirmationDialog&gt;</b> component is set to true, other items on the page will be disabled (i.e. cannot be interacted with). Modality creates an overlay below the dialog but above other page elements. Click on the Display dialog button below and notice other page buttons are disabled until the dialog is responded to. Click either the yes or no button on the box to exit.</p>
# Effect
example.ace.confirmationdialog.effect.title = ace:confirmationDialog - Display Effects Example
example.ace.confirmationdialog.effect.description = <p>The  confirmationDialog component supports a number of different effects to draw attention to the popup, as seen in the demo below.  . Select the desired effect for the show and hide events from the pull down menus below and click the display dialog button.  Close the dialog window to view the animation on close.  Possible options are: <i>blind bounce, clip, drop, explode, fade, fold, highlight, puff, pulsate, scale, shake, size, slide and transfer.</i></p>

### ACE - Context Menu
menu.ace.contextMenu.title = ace:contextMenu
menu.ace.contextMenu.subMenu.title = Examples
menu.ace.contextMenu.subMenu.main = Overview
menu.ace.contextMenu.subMenu.global = Global
menu.ace.contextMenu.subMenu.component = Per Component
menu.ace.contextMenu.subMenu.table = Table Integration
menu.ace.contextMenu.subMenu.effect = Effect
menu.ace.contextMenu.subMenu.multicolumn = Multi Column
menu.ace.contextMenu.subMenu.delegate = Delegate
# Overview
example.ace.contextMenu.title = ace:contextMenu - Overview
example.ace.contextMenu.description = <p>The <b>&lt;ace:contextMenu&gt;</b> component provides a robust popup menu system that is accessed when a designated page region is right clicked. The example below demonstrates the context menu as applied on an application wide basis. Right-click anywhere on this page to display the global menu.  Use the mouse left click to exit or select a menu entry.</p>
# Component
example.ace.contextMenu.component.title = ace:contextMenu - Per Component Context Menu Example
example.ace.contextMenu.component.description = <p>The <b>&lt;ace:contextMenu&gt;</b> component can also be used to display different menu options depending on the page region or component the mouse is on when being right clicked.  To demonstrate right click on the first sentence in the demo below and then again when the mouse is over the Submit Button.  Notice that a different popup menu is provided depending on the context or position of the mouse at the time of right click.</p>
# In Table
example.ace.contextMenu.table.title = ace:contextMenu - Table Integration Example
example.ace.contextMenu.table.description = <p>The <b>&lt;ace:contextMenu&gt;</b> component also provides context menu functionality within a data table. Right-click on the data table below to optionally add or undo addition of the items in the list.</p>
# Effect
example.ace.contextMenu.effect.title = ace:contextMenu - Display Effects Example
example.ace.contextMenu.effect.description = <p>Transition effects can be applied to the <b>&lt;ace:contextMenu&gt;</b> component. Select the desired transition effect and right-click on the image to display a context menu using the specified effect.</p>
# Multi-Column Submenu
example.ace.contextMenu.multicolumn.title = ace:contextMenu -  ace:contextMenu - Multi-Column Submenu Example
example.ace.contextMenu.multicolumn.description = <p>The <b>&lt;ace:contextMenu&gt;</b> supports submenus with multiple columns, instead of just one.</p>
# Delegate
example.ace.contextMenu.delegate.title = ace:contextMenu - Delegate Example
example.ace.contextMenu.delegate.description = <p>The <b>&lt;ace:contextMenu&gt;</b> component also provides context menu functionality within a table or iterative container in delegate mode. This means that a different context menu can be dynamically defined for a specific component in each row, without having to create a new context menu instance for each row, but only one that dynamically changes depending on the row data, improving performance on the page. In this demo you can right-click on a car name, and a menu will be shown to change some of the details for that car, without showing its current values as options.

### ACE - Data Exporter
menu.ace.dataExporter.title = ace:dataExporter
menu.ace.dataExporter.subMenu.title = Examples
menu.ace.dataExporter.subMenu.main = Overview
menu.ace.dataExporter.subMenu.columns = Specify Columns
menu.ace.dataExporter.subMenu.rows = Specify Rows
menu.ace.dataExporter.subMenu.excludeFromExport = Specify Data
menu.ace.dataExporter.subMenu.custom = Custom Exporter
# Overview
example.ace.dataExporter.title = ace:dataExporter - Overview
example.ace.dataExporter.description = <p>The <b>&lt;ace:dataExporter&gt;</b>  component is used to export data table content into CSV, XLS, PDF and XML formats.  Select the desired export format and click the Export File button below.  The table will be exported into your computers default download location in the target format.</p>
# Columns
example.ace.dataExporter.columns.title = ace:dataExporter - Specify Columns Example
example.ace.dataExporter.columns.description = <p>The <b>&lt;ace:dataExporter&gt;</b> can be configured to export only specified data columns.  Select the targeted data columns from the option list below and click Export File.  View the file from your default download location and confirm that only the select columns were exported. </p>
#Rows
example.ace.dataExporter.rows.title = ace:dataExporter - Specify Rows Example
example.ace.dataExporter.rows.description = <p>The <b>&lt;ace:dataExporter&gt;</b> can be configured to export only specified rows from data table. Select rows by clicking on them from the table below and click Export File.  View the file from your default download location and confirm that only selected rows were exported. </p>
#Exclude From Export
example.ace.dataExporter.excludeFromExport.title = ace:dataExporter - Specify Data Example
example.ace.dataExporter.excludeFromExport.description = <p>Addition of the <b>&lt;ace:excludeFromExport&gt;</b> tag can be used in order to prevent certain data to be exported in the file. In the example below select select the type of file and click Export button. View the file from your default download location and confirm that only name, weight, MPG and cost data has been imported from the table.</p>
#Custom
example.ace.dataExporter.custom.title = ace:dataExporter - Custom Exporter Example
example.ace.dataExporter.custom.description = <p>The <b>&lt;ace:dataExporter&gt;</b> can be configured to use a custom type of exporting. This allows developers to present the data in any format required by the end users of the application or to add custom additions to the built-in export types. This example illustrates how to extend the built-in CSV exporter type to export inner tables that are included inside an &lt;ace:panelExpansion&gt; component. This example allows the user to select from a list which inner tables to include. These custom exporters are already included in ICEfaces, under the ACE data exporter folder.</p>

### ACE - Data Table
menu.ace.dataTable.title = ace:dataTable
menu.ace.dataTable.subMenu.title = Examples
menu.ace.dataTable.subMenu.main = Overview
menu.ace.dataTable.subMenu.filtering = Filtering
menu.ace.dataTable.subMenu.sorting = Sorting
menu.ace.dataTable.subMenu.paginator = Paginator
menu.ace.dataTable.subMenu.scrolling = Scrolling
menu.ace.dataTable.subMenu.lazyLoading = Lazy Loading
menu.ace.dataTable.subMenu.selector = Selection
menu.ace.dataTable.subMenu.listener = Row Listener
menu.ace.dataTable.subMenu.rowexpansion = Row Expansion
menu.ace.dataTable.subMenu.panelexpansion = Panel Expansion
menu.ace.dataTable.subMenu.configpanel = Table Configuration
menu.ace.dataTable.subMenu.configpaneladvanced = Table Configuration (Advanced)
menu.ace.dataTable.subMenu.rowstate = Row State
menu.ace.dataTable.subMenu.stackable = Column Stacking
menu.ace.dataTable.subMenu.columnReordering = Column Reorder
menu.ace.dataTable.subMenu.columnResizing = Column Resizing
menu.ace.dataTable.subMenu.dynamicColumns = Dynamic Columns
menu.ace.dataTable.subMenu.rowEditing = Row/Cell Editing
menu.ace.dataTable.subMenu.find = Find
menu.ace.dataTable.subMenu.grouping = Grouping
menu.ace.dataTable.subMenu.multiRowHeader = Multi Row Header
menu.ace.dataTable.subMenu.pinning = Pin Columns
menu.ace.dataTable.subMenu.click = Click Events

# Overview
example.ace.dataTable.title = ace:dataTable - Overview
example.ace.dataTable.description = <p>The <b>&lt;ace:dataTable&gt;</b>  is a rich data table component and arguably one of the most comprehensive and versatile components available in the industry. A large set of features is supported by this tag including sorting, scrolling, pagination, data filtering, lazy loading, column stacking etc. The demo example below represents a superset of some more common features.  To view filtering functionality enter a sample of text or characters in the open text boxes at the top of each column (i.e. enter \u201c11\u201d in the text box in the MPG column.  The filtered data rows will appear.  Delete the entry to return to the original table.  View pagination capability by clicking on the page numbers at the bottom of the table. </p>
# Column Reordering
example.ace.dataTable.columnReordering.title = ace:dataTable - Column Reordering Example
example.ace.dataTable.columnReordering.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports re-ordering of columns through drag and drop if the columnOrdering attribute of the <ace:dataTable> is set to true. Column re-ordering can be turned on or off on a column by column basis.  In the example below click and hold the Cost column header cell with the left mouse button.  Drag the mouse / column to the left side of the table and release.</p>
# Column Resizing
example.ace.dataTable.columnResizing.title = ace:dataTable - Column Resizing Example
example.ace.dataTable.columnResizing.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports resizing of columns if resizableColumns attribute of the dataTable is set to true. In the example below click and hold one of the column header borders with the left mouse button. Drag the mouse to the left or right side of the table and release.</p>
# Column Stacking
example.ace.dataTable.stackable.title = ace:dataTable - Column Stacking Example
example.ace.dataTable.stackable.description = <p>The <b>&lt;ace:dataTable&gt;</b> component also allows developers to implement the \u201cstacking\u201d  of multiple columns in order to facilitate alternative viewing options when space is at a premium. The sample below illustrates a 7 column data table rendered in 4 columns.</p>
# Dynamic Columns
example.ace.dataTable.dynamicColumns.title = ace:dataTable - Dynamic Columns Example
example.ace.dataTable.dynamicColumns.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports dynamic columns by using the <b>&lt;c:forEach&gt;</b> technique for defining dynamic columns through a column model. In the example below check / uncheck the column name checkboxes to dynamically add / remove columns.</p>
# Filtering
example.ace.dataTable.filtering.title = ace:dataTable - Filtering Example
example.ace.dataTable.filtering.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports both column and multi-column filtering capabilities.  To view the demo, enter the character combination you wish to filter for by column in the blank field under the column header information. For example enter \u201c2\u201d in the Weight column field to view all cars with a \u201c2\u201d in their weight.  Next enter a \u201cM\u201d in the Chassis column to further refine the search</p>
#Lazy Loading
example.ace.dataTable.lazyLoading.title = ace:dataTable - Ultra-large Table Support
example.ace.dataTable.lazyLoading.description = <p>The <b>&lt;ace:dataTable&gt;</b> contains lazy loading algorithms to enable viewing and loading of very large data tables in quick and responsive manner. This table example below loads over 300,000 records of random cars, displaying 31 rows of data per page across 9,000+ pages. Use the Data Table paginator option to move between pages, noting how quickly each page is loaded and rendered.</p>
#Multi Row Header
example.ace.dataTable.multiRowHeader.title = ace:dataTable - Multi Row Header
example.ace.dataTable.multiRowHeader.description = <p>The <b>&lt;ace:dataTable&gt;</b> component allows developers to implement the \u201cstacking\u201d  of multiple row headers in order to group related columns into different sections. The sample below illustrates a 6 column data table which headers are combined into logical groups for easy viewing .</p>
# Paginator
example.ace.dataTable.paginator.title = ace:dataTable - Paginator Example
example.ace.dataTable.paginator.description = <p>The <b>&lt;ace:dataTable&gt;</b> allows developers to implement table navigational controls and embedded them at the bottom or top of the data table.  This allows users to view specific data table pages, to increment / decrement page views or to skip to first / last pages. Use the control inputs located above the table to modify data table formatting options, then click through the data table using the navigational controls provided.</p>
# Panel Expansion
example.ace.dataTable.panelexpansion.title = ace:dataTable - Panel Expansion Example
example.ace.dataTable.panelexpansion.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports a panel expansion feature which allows developers to embed a panel that can contain any kind of arbitrary information, immediately below a data table row.  The panel can be exposed / hidden by clicking on an icon embedded in the table.  Click on the arrows in the leftmost column to expand and collapse inserted panel views for this demo.</p>
# Row Expansion
example.ace.dataTable.rowexpansion.title = ace:dataTable - Row Expansion Example
example.ace.dataTable.rowexpansion.description = <p>The <b>&lt;ace:dataTable&gt;</b> allows developers to group two or more rows within a table together and expand / collapse them based on the user clicking an icon embedded in the table.  Note that the expanded rows must follow the original data table structure.  Click on the row expansion arrows to the left side of the table to expand / collapse table row entries.</p>
# Listener
example.ace.dataTable.listener.title = ace:dataTable - Row Listener Example
example.ace.dataTable.listener.description = <p>The <b>&lt;ace:dataTable&gt;</b> allows for the addition of server side listeners to the data table which will signal the application when rows or cells have been selected or deselected. In this example, listeners have been added at the row level.  Click on one of the table rows, and view the event log feedback below (from the server), which indicates which rows have been and are currently selected.</p>
# Selector
example.ace.dataTable.selector.title = ace:dataTable - Selection Example
example.ace.dataTable.selector.description = <p>The <b>&lt;ace:dataTable&gt;</b> provides functionality that allows users to select one or multiple rows (or cells) within a data table. The selected row(s) or cell(s) can be identified through format changes to the selection and the selection details can be passed to the application resident on the server for additional processing.  In the demo below, select the desired selection behavior attributes and select the appropriate row(s) / cell(s).  The selection status as identified by the application is updated in the text below the table.</p>
# Row State
example.ace.dataTable.rowstate.title = ace:dataTable - Row State Example
example.ace.dataTable.rowstate.description = <p>The row state example demonstrates some of the enhanced control functions associated with row selection, visibility and cell / row editability. Click on the desired Selection, Visibility, and Editability attributes, then click on the desired cell / row in the table. To demonstrate in-cell editing, select Enable Editing for All, select the desired row of the cell you wish to edit, then click the pencil icon associated with the row you wish to edit.  The data table entries will become editable in place.  Once finished, click the checkmark to confirm and update or the \u201cx\u201d  under the Edit row to reject the changes.</p><p>The RowStateMap class implements Map&lt;Object, RowState&gt;, where the object used as key is the same data object used to populate the row. Because of this, when using these advanced features, like selection, editing, expansion, etc., it is necessary that the data object class implement custom hashCode() and equals() methods so that the correct RowState object be returned every time throughout multiple lifecycles, consistently. This is especially important when using these features in lazy loading mode.</p>
# Scrolling
example.ace.dataTable.scrolling.title = ace:dataTable - Scrolling Example
example.ace.dataTable.scrolling.description = <p>The <b>&lt;ace:dataTable&gt;</b> support scrolling features via mouse scroll wheel, multi-touch or through dragging of scroll bars located on the side of the table.  In the example below the user can Enable or Disable scrolling through selecting the checkbox button and can control the table height in pixels through the data input box.</p>
# Sorting
example.ace.dataTable.sorting.title = ace:dataTable - Sorting Example
example.ace.dataTable.sorting.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports both single and multi-row sorting options.  Click on the up and down arrows embedded in the column headers below to view the sort function in ascending or descending orders.  To add in additional columns for sorting press the control or command key on your keyboard while simultaneously clicking on the up / down arrow key of the addition column sorting parameter.  For example first click the up arrow of the chassis column to view the chassis types in alphabetical order (Bus to Van).  Then click the down arrow of the weight column while holding down the command / control key.  You should see that the \u201cBus\u201d entries at the top of the table are now re-ordered by descending weight options.</p>
# Table Config
example.ace.dataTable.configpanel.title = ace:dataTable - Configuration Example 
example.ace.dataTable.configpanel.description = <p>Features and functions such as column renaming, sortability, column ordering and sizing etc. can be dynamically specified through an ace:dataTable configuration panel.  In this example, click on the \u201cgear\u201d icon in the header of the rightmost column to access the configuration panel. Change the column names, visibility, ordering parameters etc. to the desired states.  Click on the \u201carrow\u201d in the configuration panel header to save the new settings or the \u201cx\u201d to ignore and return to prior settings.  View the updates in the table below.</p> <p>This demo also shows how to save the different settings specified through the configuration panel. Modify the settings as you wish and then click on the 'Save Settings' button. Then, click on the 'Restore Default Settings' button to view the table in its original state, and then click on the 'Restore Saved Settings' button to view the table as you had configured it.</p>
# Table Config Advanced
example.ace.dataTable.configpaneladvanced.title = ace:dataTable - Configuration Example 
example.ace.dataTable.configpaneladvanced.description = <p>This demo shows how a table works with multiple header rows, while still supporting the configuration panel. Notice that now the column attributes are defined in the header rows and not in the body rows.</p>
# Row Editing
example.ace.dataTable.rowEditing.title = ace:dataTable - Row / Cell Editing Example
example.ace.dataTable.rowEditing.description = <p>The <b>&lt;ace:dataTable&gt;</b> supports both row and cell editing.  In the demo below, select the pencil icon in the Options column for the row you wish to edit.  Once clicked, notice the cell components of the selected row become editable.  Make desired changes and select the checkmark to save and refresh the row, or the \u201cx\u201d to reject and revert the row back to the original settings.</p>
# Find
example.ace.dataTable.find.title = ace:dataTable - Table Search Example
example.ace.dataTable.find.description = <p>Find a row in the table and highlight it.</p>
# Grouping
example.ace.dataTable.grouping.title = ace:dataTable - Column Grouping Example
example.ace.dataTable.grouping.description = <p>Rowspan equal values in columns. Conditional row used to summarize chassis groups.</p>
# Pinning
example.ace.dataTable.pinning.title = ace:dataTable - Column Pinning Example
example.ace.dataTable.pinning.description = <p>Statically position particular columns alongside scrollable table in a particular order.</p>
#Click
example.ace.dataTable.click.title = ace:dataTable - Click Event Example
example.ace.dataTable.click.description = <p>Enable application driven selection and editing via click and double click ajax events. Try double clicking on a cell to edit it. After editing it, double click again on the same cell to save changes. Try clicking on any row to select it. Click on it again to deselect it. All this is done in the bean, by manipulating the table's row state map object.</p>

### ACE - Cell Editor
menu.ace.cellEditor.title = ace:cellEditor
menu.ace.cellEditor.subMenu.title = Examples
menu.ace.cellEditor.subMenu.main = Overview
# Overview
example.ace.cellEditor.title = ace:cellEditor - Overview
example.ace.cellEditor.description = <p>The <b>&lt;ace:cellEditor&gt;</b> </p>

### ACE - Column Group
menu.ace.columnGroup.title = ace:columnGroup
menu.ace.columnGroup.subMenu.title = Examples
menu.ace.columnGroup.subMenu.main = Overview
# Overview
example.ace.columnGroup.title = ace:columnGroup - Overview
example.ace.columnGroup.description = <p>The <b>&lt;ace:columnGroup&gt;</b> </p>

### ACE - Row Expansion
menu.ace.rowExpansion.title = ace:rowExpansion
menu.ace.rowExpansion.subMenu.title = Examples
menu.ace.rowExpansion.subMenu.main = Overview
# Overview
example.ace.rowExpansion.title = ace:rowExpansion - Overview
example.ace.rowExpansion.description = <p>The <b>&lt;ace:rowExpansion&gt;</b> </p>

### ACE - Table Config Panel
menu.ace.tableConfigPanel.title = ace:tableConfigPanel
menu.ace.tableConfigPanel.subMenu.title = Examples
menu.ace.tableConfigPanel.subMenu.main = Overview
menu.ace.tableConfigPanel.subMenu.advanced = Advanced
# Overview
example.ace.tableConfigPanel.title = ace:tableConfigPanel - Overview
example.ace.tableConfigPanel.description = <p>The <b>&lt;ace:tableConfigPanel&gt;</b> component </p>
# Advanced
example.ace.tableConfigPanel.advanced.title = ace:tableConfigPanel - Advanced Example
example.ace.tableConfigPanel.advanced.description = <p>...</p>

### ACE - Date Time Entry
menu.ace.dateentry.title = ace:dateTimeEntry
menu.ace.dateentry.subMenu.title = Examples
menu.ace.dateentry.subMenu.main = Overview
menu.ace.dateentry.subMenu.popup = Popup
menu.ace.dateentry.subMenu.timeentry = Time Entry
menu.ace.dateentry.subMenu.ajax = Ajax Submit
menu.ace.dateentry.subMenu.pages = Multiple Months
menu.ace.dateentry.subMenu.minmax = Restrict Min/Max
menu.ace.dateentry.subMenu.navigator = Navigator
menu.ace.dateentry.subMenu.label = Label Position
menu.ace.dateentry.subMenu.indicator = Indicator Text
menu.ace.dateentry.subMenu.reqStyle = Required Styling
menu.ace.dateentry.subMenu.locale = Locale
# Overview
example.ace.dateentry.title = ace:dateTimeEntry - Overview
example.ace.dateentry.description = <p> The <b>&lt;ace:dateTimeEntry&gt;</b> component is a calendar component used to capture date entry.  It supports features such as paging, localization etc. and can operate client based or from the server.  The sample below demonstrates server side operation.  Click on a desired date and press the \u201cSubmit Date\u201d button at the bottom of the calendar.  The application will process the date submission and mirror it back in the text line at the top of the calendar.</p>
# Popup
example.ace.dateentry.popup.title = ace:dateTimeEntry - Popup Example
example.ace.dateentry.popup.description = <p>The <b>&lt;ace:dateTimeEntry&gt;</b> component supports both popup or input text operations. In the example below, check the \u201cDisplay as Popup\u201d checkbox and click the calendar icon to view a calendar popup.  Select a date from the calendar popup and click the Submit Date button to view the processed date submission in the text field below.  With the Display as Popup deselected, the calendar will remain permanently visible.</p>
# Time Entry
example.ace.dateentry.timeentry.title = ace:dateTimeEntry - Time Entry Example
example.ace.dateentry.timeentry.description = <p>The <b>&lt;ace:dateTimeEntry&gt;</b> component supports entering time as well as the date.</p>
# Ajax Submit
example.ace.dateentry.ajax.title =  ace:dateTimeEntry - AJAX Submit Example
example.ace.dateentry.ajax.description = <p>The <b>&lt;ace:dateTimeEntry&gt;</b> component can operate client side using localized Ajax controls.  Ajax processing is enabled in the example below.  To view click on the text entry panel below to trigger the calendar popup.  Select a date and notice that the selected date field below is processed and updated immediately upon date selection without submitting the selection to the server.</p>
# Multiple Months
example.ace.dateentry.pages.title = ace:dateTimeEntry - Multiple Months Example
example.ace.dateentry.pages.description = <p>The <b>&lt;ace:dateTimeEntry&gt;</b> component supports display of multiple months in a single calendar.  In the example below, toggle through months by selecting the right / left arrow elements in the calendar header.  Notice selected dates are immediately updated upon date selection in the text field below.  Using the pull down menu at the bottom of the calendar you can select multiple calendar months to be displayed and selectable at any one time.</p>
# Restrict Min/Max
example.ace.dateentry.minmax.title = ace:dateTimeEntry - Restrict Min/Max
example.ace.dateentry.minmax.description = <p>The <b>&lt;ace:dateTimeEntry&gt;</b> component supports restricting the minimum and maximum date and time values that can be entered. By default the date range can be from one year ago or five years in the future. Notice how invalid dates are not selectable by the user.</p>
# Navigator
example.ace.dateentry.navigator.title =  ace:dateTimeEntry - Dropdown Navigator Example
example.ace.dateentry.navigator.description = <p>The example below demonstrates how the <b>&lt;ace:dateTimeEntry&gt;</b> component can be configured for optional navigation through drop down month / year menus.  To run the demo, ensure the \u201cEnable Dropdown Navigation \u201c box is selected.  Click on the month pull down menu to select desired month entry and repeat with desired year selection.  Click on selected date and notice the update to the Selected Date in the text box below.</p>
# Label Position
example.ace.dateentry.label.title =  ace:dateTimeEntry - Label Position
example.ace.dateentry.label.description = <p>The example below demonstrates how the <b>&lt;ace:dateTimeEntry&gt;</b> component can have an associated inline label which can have custom text and a custom position.</p>
# Indicator Text
example.ace.dateentry.indicator.title =  ace:dateTimeEntry - Indicator Text
example.ace.dateentry.indicator.description = <p>The example below demonstrates how the <b>&lt;ace:dateTimeEntry&gt;</b> component can have custom text indicating that the field is required or optional.</p>
# Required Styling
example.ace.dateentry.reqStyle.title =  ace:dateTimeEntry - Required Styling
example.ace.dateentry.reqStyle.description = <p>The example below demonstrates how the <b>&lt;ace:dateTimeEntry&gt;</b> component can be uniquely styled to demonstrate to the user that the field is required. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>
# Overview
example.ace.dateentry.locale.title = ace:dateTimeEntry - Locale
example.ace.dateentry.locale.description = <p>Locale month names and weekday names can be set by JS on the client side. If not set on the client side, they will be set by Java from the sever side.</p>

### ACE - Dialog
menu.ace.dialog.title = ace:dialog
menu.ace.dialog.subMenu.main = Overview
menu.ace.dialog.subMenu.effectsAndSize = Effects & Size
menu.ace.dialog.subMenu.modalDialog = Modal & Movable
# Overview
example.ace.dialog.title = ace:dialog - Overview
example.ace.dialog.description = <p>The <b>&lt;ace:dialog&gt;</b> component allows developers to deploy a floating window constructed of a customizable title bar and a content region.  The component can be moved across the page using drag and drop, can be resized and will introduce scollbars automatically should content exceed available space.  It supports a number of display options including semi-transparent overlay, open / close effects etc.  In the sample below click the \u201cShow Dialog\u201d button to open the dialog window.  Click and hold down the left mouse button over the bottom right corner to experiment with resizing the dialog box. Enter desired text in the two available fields and select the click me button when complete.  The entered text is mirrored back by the application in the text entry field below.</p>
# Size & Effects
example.ace.dialog.dialogEffectAndSize.title =  ace:dialog - Animation and Size Configuration Example
example.ace.dialog.dialogEffectAndSize.description = <p>The dialog box supports minimum width / height definitions as well as a variety of animation effects that are triggered on open and close operations.  Use the pull down menus below to set desired dialog box dimensions and show / hide animations.  Click on the Show Dialog button once completed to view the results. Resizing of the dialog box is achieved by clicking and holding the left mouse button over the bottom right corner of the box.  Notice that resizing is bound by minimum width / height constraints previously established.  Box is closed by selecting the \u201cx\u201d in header bar.</p>
# Modal Dialog
example.ace.dialog.modalDialog.title =  ace:dialog - Modal and Movable Example
example.ace.dialog.modalDialog.description = <p>The <b>&lt;ace:dialog&gt;</b> component supports both modal operation and drag and drop operation.  The modal option will create an overlay below the dialog box and above the other page elements. Select the desired option in the customization panel below.  Click on the Show Dialog button to view the dialog component.  Click and hold the left mouse button down over the dialog component header bar and drag the component to the desire position.  Drop the component into place by releasing the left mouse button.</p>

### ACE - Drag and Drop
menu.ace.dragDrop.title = ace:draggable/droppable
menu.ace.dragDrop.subMenu.main = Overview
menu.ace.dragDrop.subMenu.draggable = Draggable
menu.ace.dragDrop.subMenu.dataTableIntegration = Table Integration
# Overview
example.ace.dragDrop.title = ace:draggable/droppable - Overview
example.ace.dragDrop.description = <p>The ace library supports drag and drop operation through its <b>&lt;ace:draggable&gt;</b> and <b>&lt;ace:droppable&gt;</b> components. When embedded within other components (i.e. panels, menus etc.) the components will become draggable and droppable.  Both elements support a wide range of features that allow developers to constrain drag behaviors and drop regions as well as controlling appearance etc.  In the demo below select and hold the images of objects in the list on the left with the left mouse button.  Drag them over an available box on the right.  Note that this particular example demonstrates a restriction on the drop region in that only certain elements can be dropped in certain regions (i.e. electronic elements can only be dropped into electronic labeled boxes). Also note that in this example the object must be 100% inside the box before dropping is allowed.</p>
# Draggable 
example.ace.draggable.title = ace:draggable - Configuration Example
example.ace.draggable.description = <p>The <b>&lt;ace:draggable&gt;</b> component supports a number of features that control the drag operation.  These include restricting the direction of drag (vertical / horizontal / any), containing drag within a certain page region, dragging by predetermined grid steps, having the drag object remain opaque or translucent etc.  In the example below select the desired drag characteristics using the pull down menus below.  Left click and hold on the image and drag the element to its new position.  Release the mouse button to drop.  Note that certain option settings may restrict how the image moves and where it can be dropped.</p>
# Data Table Integration
example.ace.dataTableIntegration.title = ace:draggable/droppable - Data Table Integration Example
example.ace.dataTableIntegration.description = <p>The ace drag and drop features are supported within data tables.  In the example below select one of the picture elements from the top table. Drag it and drop it onto the Shopping Cart Table below.  Notice the Shopping Cart Table is updated with new content on the drop action.</p>

### ACE - Dynamic Resource
menu.ace.dynamicResource.title = ace:dynamicResource
menu.ace.dynamicResource.subMenu.title = Examples
menu.ace.dynamicResource.subMenu.main = Overview
menu.ace.dynamicResource.subMenu.advanced = Advanced
# Overview
example.ace.dynamicResource.title = ace:dynamicResource - Overview
example.ace.dynamicResource.description = <p>The <b>&lt;ace:dynamicResource&gt;</b> component </p>
# Advanced
example.ace.dynamicResource.advanced.title = ace:dynamicResource - Advanced Example
example.ace.dynamicResource.advanced.description = <p>...</p>

### ACE - FileEntry
menu.ace.fileentry.title = ace:fileEntry
menu.ace.fileentry.subMenu.title = Examples
menu.ace.fileentry.subMenu.main = Overview
menu.ace.fileentry.subMenu.listener = Listener
menu.ace.fileentry.subMenu.validation = Validation
menu.ace.fileentry.subMenu.multiple = Multiple
menu.ace.fileentry.subMenu.failpop = Failed Popup
menu.ace.fileentry.subMenu.callback = Callback
# Overview
example.ace.fileentry.title = ace:fileEntry - Overview
example.ace.fileentry.description = <p>The <b>&lt;ace:fileEntry&gt;</b> component allows users to select a file from a local machine or network, and submit that file for upload to a specified location. The component supports limitations on location selection, file size and provides file validation functionality to the application.  In the example below select the \u201cChoose File\u201d button.  A selection window will open allowing you to navigate your local machine to select a file. Once selected the file name will be mirrored onto the page for confirmation. Click \u201cSend File\u201d to temporarily upload the file to the ICEsoft server (limited to 6 MB per file and 18 MB for all uploaded files).</p>
# Basic
example.ace.fileentry.listener.title = ace:fileEntry - File Upload Listener Example 
example.ace.fileentry.listener.description = <p>The following example demonstrates a custom listener for the <b>&lt;ace:fileEntry&gt;</b> component, which only allow <b>pdf</b> file uploads.  Select the Choose File button below, select a target file for upload and press the Send File button to upload the target file into a sub-directory within the root application directory on the ICEsoft servers. Notice a warning message every time you are trying to upload a non PDF file </p>
# Callback
example.ace.fileentry.callback.title = ace:fileEntry - File Upload Callback Example 
example.ace.fileentry.callback.description = <p>The following example demonstrates a custom callback for the <b>&lt;ace:fileEntry&gt;</b> component, which custom fails on <b>pdf</b> file uploads.  Select the Choose File button below, select a target file for upload and press the Send File button to upload the target file into a sub-directory within the root application directory on the ICEsoft servers. Notice an error message when you try to upload a PDF file </p>
example.ace.fileentry.callback.error = PDF files cannot be uploaded. Upload cancelled for :
example.ace.fileentry.callback.success = Upload successful for : 
# Validation Options
example.ace.fileentry.valid.title = ace:fileEntry - Validation Example 
example.ace.fileentry.valid.description = <p>The <b>&lt;ace:fileEntry&gt;</b> component supports a number of attributes that developers can set to regulate and assess the validity of the file to be uploaded.  Restrictions can be placed as to file size, file type etc. as well feedback messages can be set for the user in the event of validation failure.  In the example below, set size restriction for the file to be uploaded by using the slider below. Choose a file to be uploaded that complies with the validation settings and press Send File to upload the file.  Repeat with a file that violates the settings and view the customized response.</p>

# Multiple File Upload Options (inactive)
example.ace.fileentry.multiple.title = ace:fileEntry - Multiple Upload Example 
example.ace.fileentry.multiple.description = <p>The file entry example below demonstrates attributes related to functionality of the component that has not yet been completed, though they are documented in the TLD.</p>
# Fail Popup (inactive)
example.ace.fileentry.failpop.title = ace:fileEntry - Popup Validation Example
example.ace.fileentry.failpop.description = <p>The file entry example below demonstrates a compound example of functionality whose completion that is waiting on a showcase wide popup component.</p>

### ACE - GraphicImage
menu.ace.graphicImage.title = ace:graphicImage
menu.ace.graphicImage.subMenu.title = Examples
menu.ace.graphicImage.subMenu.main = Overview
# Overview
example.ace.graphicImage.title = ace:graphicImage - Overview
example.ace.graphicImage.description = <p>The <b>&lt;ace:graphicImage&gt;</b> </p>

### ACE - LinkButton
menu.ace.linkButton.title = ace:linkButton
menu.ace.linkButton.subMenu.title = Examples
menu.ace.linkButton.subMenu.main = Overview
# Overview
example.ace.linkButton.title = ace:linkButton - Overview
example.ace.linkButton.description = <p>The <b>&lt;ace:linkButton&gt;</b> is a navigational component used for executing application listeners, performing action navigation and form submission. The demo below demonstrates active and static navigation to both relative and absolute URL\u2019s.  Click the links to view a page jump to the designated URL\u2019s. </p>

### ACE - Masked Entry
menu.ace.maskedEntry.title = ace:maskedEntry
menu.ace.maskedEntry.subMenu.main = Overview
menu.ace.maskedEntry.subMenu.label = Label Position
menu.ace.maskedEntry.subMenu.indicator = Indicator Text
menu.ace.maskedEntry.subMenu.reqStyle = Required Styling
# Overview
example.ace.maskedEntry.title = ace:maskedEntry - Overview
example.ace.maskedEntry.description = <p>The <b>&lt;ace:maskedEntry&gt;</b> component  is a text input element that allows developers to restrict text input fields to be formatted in a particular manner.  Masking allows the developers to specify the number and type of characters (alphabetical / numeric / optional etc.).  The example below illustrates various masking options around numerical inputs.  Click in the text entry boxes below to enter date of birth, work phone number etc.  Notice the specific formatting requirements of the box (i.e. number of characters) etc.  Tab through to the next entry box and view the text updates in the Entered Data Frame below.</p>
# Label Position
example.ace.maskedLabel.title = ace:maskedEntry - Label Position
example.ace.maskedLabel.description = <p>The example below demonstrates how the <b>&lt;ace:maskedEntry&gt;</b> component can have an associated inline label which can have custom text and a custom position.
# Indicator Text
example.ace.maskedIndicator.title = ace:maskedEntry - Indicator Text
example.ace.maskedIndicator.description = <p>The example below demonstrates how the <b>&lt;ace:maskedEntry&gt;</b> component can have custom text indicating that the field is required or optional.</p>
# Required Styling
example.ace.maskedReqStyle.title = ace:maskedEntry - Required Styling
example.ace.maskedReqStyle.description = <p>The example below demonstrates how the <b>&lt;ace:maskedEntry&gt;</b> component can be uniquely styled to demonstrate to the user that the field is required. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - Text Entry
menu.ace.textEntry.title = ace:textEntry
menu.ace.textEntry.subMenu.main = Overview
menu.ace.textEntry.subMenu.autotab = Auto Tab
menu.ace.textEntry.subMenu.label = Label Position
menu.ace.textEntry.subMenu.indicator = Indicator Text
menu.ace.textEntry.subMenu.reqStyle = Required Styling
# Overview
example.ace.textEntry.title = ace:textEntry - Overview
example.ace.textEntry.description = <p>The <b>&lt;ace:textEntry&gt;</b> component is a text input component with &lt;ace:ajax&gt; support. Users can optionally specify a label and/or a required/optional indicator and place them in various positions in and around the input field. The input field, label, indicator, as well as the input field validation error state, can all be styled separately using predefined style class names in the theme stylesheet. The auto tab feature will automatically tab out of the input field when the maxlength (if specified) is reached.</p>
# Auto Tab
example.ace.textEntry.autotab.title = ace:textEntry - Auto Tab
example.ace.textEntry.autotab.description = <p>The <b>&lt;ace:textEntry&gt;</b> component supports "auto tab" functionality where the next field will be focused when the current field has a set number of characters entered into it. This is extremely useful for quick data entry in inventory and point-of-sales systems.</p>
# Label Position
example.ace.textEntry.label.title = ace:textEntry - Label Position
example.ace.textEntry.label.description = <p>This example shows to render, customize, and position an inline label for the textEntry component.</p>
# Indicator Text
example.ace.textEntry.indicator.title = ace:textEntry - Indicator Text
example.ace.textEntry.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.textEntry.reqStyle.title = ace:textEntry - Required Styling
example.ace.textEntry.reqStyle.description = <p>This example shows how the textEntry field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - Message
menu.ace.message.title = ace:message
menu.ace.message.subMenu.main = Overview
# Overview
example.ace.message.title = ace:message - Overview
example.ace.message.description = <p>The <b>&lt;ace:message&gt;</b> component renders the fisrt Faces message for a specific component. The <b>&lt;ace:messages&gt;</b> component renders all Faces messages, all Faces messages for a specific component, or all Faces messages not associated with any component. Messages can be shown with effects initially and/or whey they change. Styling is done by predefined jQuery classes in theme stylesheets:<ul><li>Info: ui-icon-info w/ ui-state-highlight css</li><li>Warn: ui-icon-notice w/ ui-state-highlight css</li><li>Error: ui-icon-alert w/ ui-state-error css</li><li>Fatal: ui-icon-alert w/ ui-state-error css</li></ul>In the following entry form, empty inputs or inputs same as the label will generate sample Faces messages with sample effects.</p>

### ACE - Messages
menu.ace.messages.title = ace:messages
menu.ace.messages.subMenu.main = Overview
# Overview
example.ace.messages.title = ace:message - Overview
example.ace.messages.description = <p>The <b>&lt;ace:message&gt;</b> component renders the fisrt Faces message for a specific component. The <b>&lt;ace:messages&gt;</b> component renders all Faces messages, all Faces messages for a specific component, or all Faces messages not associated with any component. Messages can be shown with effects initially and/or whey they change. Styling is done by predefined jQuery classes in theme stylesheets:<ul><li>Info: ui-icon-info w/ ui-state-highlight css</li><li>Warn: ui-icon-notice w/ ui-state-highlight css</li><li>Error: ui-icon-alert w/ ui-state-error css</li><li>Fatal: ui-icon-alert w/ ui-state-error css</li></ul>In the following entry form, empty inputs or inputs same as the label will generate sample Faces messages with sample effects.</p>

### ACE - GrowlMessages
menu.ace.growlmessages.title = ace:growlMessages
menu.ace.growlmessages.subMenu.main = Overview
# Overview
example.ace.growlmessages.title = ace:growlMessages - Overview
example.ace.growlmessages.description = <p>The <b>&lt;ace:growlMessages&gt;</b> component renders Faces messages in a Growl container. The container can be positioned on one of the four corners of the browser window. A message can auto-hide based on its severity level. Other attributes control the close-all button (close visible messages only, not hidden messages), display duration of auto-hide messages, no. of messages visible at a time, etc.</p>

### ACE - Text Area Entry
menu.ace.textAreaEntry.title = ace:textAreaEntry
menu.ace.textAreaEntry.subMenu.main = Overview
menu.ace.textAreaEntry.subMenu.label = Label Position
menu.ace.textAreaEntry.subMenu.indicator = Indicator Text
menu.ace.textAreaEntry.subMenu.reqStyle = Required Styling
# Overview
example.ace.textAreaEntry.title = ace:textAreaEntry - Overview
example.ace.textAreaEntry.description = <p>The <b>&lt;ace:textAreaEntry&gt;</b> component is a text input component with &lt;ace:ajax&gt; support. Users can optionally specify a label and/or a required/optional indicator and place them in various positions in and around the input field. The input field, label, indicator, as well as the input field validation error state, can all be styled separately using predefined style class names in the theme stylesheet. The ace:textAreaEntry component is also user-resizable.</p>
# Label Position
example.ace.textAreaEntry.label.title = ace:textAreaEntry - Label Position
example.ace.textAreaEntry.label.description = <p>This example shows to render, customize, and position an inline label for the textAreaEntry component.</p>
# Indicator Text
example.ace.textAreaEntry.indicator.title = ace:textAreaEntry - Indicator Text
example.ace.textAreaEntry.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.textAreaEntry.reqStyle.title = ace:textAreaEntry - Required Styling
example.ace.textAreaEntry.reqStyle.description = <p>This example shows how the textAreaEntry field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and  margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>


### ACE - Menu
menu.ace.menu.title = ace:menu
menu.ace.menu.subMenu.title = Examples
menu.ace.menu.subMenu.main = Overview
menu.ace.menu.subMenu.type = Layout
menu.ace.menu.subMenu.events = Events
menu.ace.menu.subMenu.effect = Effects
menu.ace.menu.subMenu.display =  As Popup
menu.ace.menu.subMenu.dynamic = Dynamic
# Overview
example.ace.menu.title = ace:menu - Overview
example.ace.menu.description = <p>The <b>&lt;ace:menu&gt;</b> component is a general purpose vertically oriented navigational aid that supports various animation effects, layout formats and positioning options. The sample below highlights the selected entry on mouse over and if clicked generates a log message in the panel on the right side from menu.</p>
# Type
example.ace.menu.type.title = ace:menu - Layout Example
example.ace.menu.type.description = <p>The <b>&lt;ace:menu&gt;</b> supports plain, tiered and sliding menu types.  In the example below, select the menu type then view the effects on mouse over and mouse click.  Note the \u201cOpen\u201d / \u201cSave\u201d \u2026 entries have no specific action tied to them in this demo.</p>
# Events
example.ace.menu.events.title = ace:menu - Events Example
example.ace.menu.events.description = <p>The <b>&lt;ace:menu&gt;</b> component supports both action listeners and links.  In the example below click on either the Actions or Example menu item and select one of the options.  Notice the actions / listeners fire and update the status in the text field below.  Click on the links and select one of the options to view a sample of the component opening a new window to the selected link</p>
# Effects
example.ace.menu.effect.title = ace:menu - Effects Example
example.ace.menu.effect.description = <p>The <b>&lt;ace:menu&gt;</b> component supports a variety of transitional animations.  The example below highlights two transitions, fade and slide for the exposure of sub menu elements.  Select a desired transition, enter the desired affect duration in the text field and hover the mouse over the menu item to view the effects.</p>
# Display
example.ace.menu.display.title = ace:menu - As Popup Example
example.ace.menu.display.description = <p>The <b>&lt;ace:menu&gt;</b> component supports a popup feature during mouse overs of specific page regions.  To view the menu popup, hover the mouse over the region identified below.  Click outside the menu region to cause the menu to disappear.</p>
# Dynamic (INACTIVE)
example.ace.menu.dynamic.title = ace:menu - Dynamic Example
example.ace.menu.dynamic.description = <p>Dynamic menu description</p>

### ACE - Menu Bar
menu.ace.menuBar.title = ace:menuBar
menu.ace.menuBar.subMenu.title = Examples
menu.ace.menuBar.subMenu.main = Overview
menu.ace.menuBar.subMenu.effect = Effects
menu.ace.menuBar.subMenu.click = Click to Display
menu.ace.menuBar.subMenu.dynamic = Dynamic
menu.ace.menuBar.subMenu.multicolumn = Multi Column
# Overview
example.ace.menuBar.title = ace:menuBar - Overview
example.ace.menuBar.description = <p>The <b>&lt;ace:menuBar&gt;</b> is a general purpose horizontally oriented navigational component that provides customizable menu functions in a menu bar format.  Hover over the menu items below to view the sub-menu elements or click on any item to display your selection in the panel below menu bar. Please note that choosing "Home" will redirect you to the icefaces.org site.</p>
# Effects
example.ace.menuBar.effect.title = ace:menuBar -  Effects Example
example.ace.menuBar.effect.description = <p>The <b>&lt;ace:menuBar&gt;</b> component supports a variety of transitional animations.  The example below highlights two transitions, fade and slide for the exposure of sub menu elements.  Select a desired transition and effect duration below and hover the mouse over the menu item to view the effect.</p>
# Click to Display
example.ace.menuBar.click.title = ace:menuBar - Click to Display Example
example.ace.menuBar.click.description = <p>The <b>&lt;ace:menuBar&gt;</b> supports both auto display and click to display features for uncovering submenu items.  Click the radio button element below to enable or disable auto display mode then click or hover over the menu elements to as required to view the submenu items.</p>
# Dynamic (INACTIVE)
example.ace.menuBar.dynamic.title = ace:menuBar -  ACE Menu Bar Dynamic Example
example.ace.menuBar.dynamic.description = <p>The ability to modify (add / delete) Menu Bar elements dynamically is seen in the example below.</p>
# Multi-Column Submenu
example.ace.menuBar.multicolumn.title = ace:menuBar -  ACE Menu Bar Multi-Column Submenu Example
example.ace.menuBar.multicolumn.description = <p>The <b>&lt;ace:menuBar&gt;</b> supports submenus with multiple columns, instead of just one.</p>

### ACE - Menu Button
menu.ace.menuButton.title = ace:menuButton
menu.ace.menuButton.subMenu.title = Examples
menu.ace.menuButton.subMenu.main = Overview
# Overview
example.ace.menuButton.title = ace:menuButton - Overview
example.ace.menuButton.description = <p>The <b>&lt;ace:menuButton&gt;</b> is a general purpose navigational component that provides customizable menu functions in a button format.  Click on the button to view the sub-menu elements or click on any item to display your selection in the panel below menu bar. Please note that choosing an option with "Home" icon will open a new tab in your browser and redirect you to another page.</p>

### ACE - Menu Separator
menu.ace.menuSeparator.title = ace:menuSeparator
menu.ace.menuSeparator.subMenu.title = Examples
menu.ace.menuSeparator.subMenu.main = Overview
# Overview
example.ace.menuSeparator.title = ace:menuSeparator - Overview
example.ace.menuSeparator.description = <p></p>

### ACE - MultiColumn Submenu
menu.ace.multiColumnSubmenu.title = ace:multiColumnSubmenu
menu.ace.multiColumnSubmenu.subMenu.title = Examples
menu.ace.multiColumnSubmenu.subMenu.main = Overview
# Overview
example.ace.multiColumnSubmenu.title = ace:multiColumnSubmenu - Overview
example.ace.multiColumnSubmenu.description = <p></p>

### ACE - Notification Panel
menu.ace.notificationpanel.title = ace:notificationPanel
menu.ace.notificationpanel.subMenu.title = Examples
menu.ace.notificationpanel.subMenu.main = Server Side
menu.ace.notificationpanel.subMenu.clientSide = Client Side
# Overview
example.ace.notificationpanel.title = ace:notificationPanel - Server Side
example.ace.notificationpanel.description = <p>The <b>&lt;ace:notificationPanel&gt;</b> is a container component into which any content can be placed.  The panel is typically positioned at either the top or bottom of the page and can shown or hidden based on the application state.  The component supports fade and slide animations on show and hide commands available in slow, normal, and fast transition speeds. The example below demonstrate how notification panel can be used in a server based mode. To view operation click on the Show Using Server button below.</p>
#Client Side
example.ace.notificationpanel.client.title = ace:notificationPanel - Client Side
example.ace.notificationpanel.client.description = <p>The <b>&lt;ace:notificationPanel&gt;</b> is a container component into which any content can be placed.  The panel is typically positioned at either the top or bottom of the page and can shown or hidden based on the application state.  The component supports fade and slide animations on show and hide commands available in slow, normal, and fast transition speeds. The example below demonstrate how notification panel can be used in a client side based mode. In this example "Show/Hide via client" buttons can be used to manipulate notification panel.</p>

### ACE - Panel
menu.ace.panel.title = ace:panel
menu.ace.panel.subMenu.title = Examples
menu.ace.panel.subMenu.main = Overview
menu.ace.panel.subMenu.header = Header&amp;Footer
menu.ace.panel.subMenu.toggle = Toggleable
menu.ace.panel.subMenu.close = Closeable
menu.ace.panel.subMenu.listener = Listener
menu.ace.panel.subMenu.menu = Menu
# Overview 
example.ace.panel.title = ace:panel - Overview
example.ace.panel.description = <p>The <b>&lt;ace:panel&gt;</b>  component is a generic layout container that supports customizable header / footers, accordion toggling, open and close popup features as well as embedded menu operations.  In the example below, the panel collapse and expansion can be viewed by toggling the \u201cCollapse\u201d button at the bottom of the panel. Likewise the panel can be minimized by pressing the \u201c-\u201c icon in the panel header.  Pressing the gear icon in the panel header illustrates the embedded menu feature of the component.</p>
# Headers
example.ace.panel.header.title = ace:panel - Header and Footer Example
example.ace.panel.header.description = <p>The example below demonstrates the dynamic addition, deletion and modification of panel header and footer text.  Toggle Header and Footer presence on / off through the check box components as well.  Modify the contents of the text box to edit the header and footer title content.</p>
# Toggleable
example.ace.panel.toggle.title = ace:panel - Toggleable Example
example.ace.panel.toggle.description = <p>The example below illustrates how the <b>&lt;ace:panel&gt;</b> component can be expanded or collapsed by the viewer in an accordion like fashion.  To run the demo, enable or disable the Toggleable feature by clicking on the checkbox below.  Set the speed of the Toggle transition in the text entry box below.  With Toggle enabled, click on the \u201c-\u201c sign on the panel header to close the panel and on the \u201c+\u201d sign on the panel header to re-expand it.</p>
# Closeable
example.ace.panel.close.title = ace:panel - Closeable Example
example.ace.panel.close.description = <p>The example below illustrates the \u201ccloseable\u201d feature of the <b>&lt;ace:panel&gt;</b> component.  To activate the feature ensure the Closeable select button is set to on.  Set the close speed option in the text field below.  Once set, click on the \u201cx\u201d on the right side of the panel header to close the panel.  To reactivate the panel, toggle the \u201cCloseable\u201d select button to off and the closed panel will reappear.</p>
# Listener
example.ace.panel.listener.title = ace:panel - Listener Example
example.ace.panel.listener.description = <p>The example below demonstrates how application listeners can be attached to the component to monitor various toggle events and report the actions back to the application. Click on the \u201c-\u201c icon on the panel header below to minimize the icon and see that the Listener Status text field below is updated by the application with the most panel action.</p>
# Menu
example.ace.panel.menu.title = ace:panel - Menu Example
example.ace.panel.menu.description = <p>The example below illustrates how a menu item can be integrated within the panel header.  Click on the gear icon located at the top right of the panel header to expose the menu options. Note that the menu commands have been intentionally disabled for this demo.  Click outside the menu to have it collapse.</p>

### ACE - Printer
menu.ace.printer.title = ace:printer
menu.ace.printer.subMenu.title = Examples
menu.ace.printer.subMenu.main = Overview
# Overview
example.ace.printer.title = ace:printer - Overview
example.ace.printer.description = <p>The <b>&lt;ace:printer&gt;</b> component component / tag can be used to send specific component on a page to a printer, such as an image or table, without having to print an entire page.  In the case of tables, only visible columns / rows / panels will be printed.  Collapsed rows or columns or panels will not be printed. To view the demo below click on one of the three print options located below.</p>

### ACE - Progress Bar
menu.ace.progressbar.title = ace:progressBar
menu.ace.progressbar.subMenu.title = Examples
menu.ace.progressbar.subMenu.main = Overview
menu.ace.progressbar.subMenu.polling = Polling
menu.ace.progressbar.subMenu.push = Push
menu.ace.progressbar.subMenu.client = Client Side
menu.ace.progressbar.subMenu.clientAndServer = Client&amp;Server
# Overview
example.ace.progressbar.title = ace:progressBar - Overview
example.ace.progressbar.description = <p>The <b>&lt;ace:progressBar&gt;</b> is a status indicator component capable of working on the client side only or as a server side component using AJAX.  The component supports polling and ICEfaces Push technology.  In the example below click on \u201cPrevious\u201d or \u201cNext\u201d below the image to advance the image carrousel to the right or the left. Notice the progress bar located above the image advances and recedes based on the image number being shown.</p>
# Polling
example.ace.progressBarPoling.title = ace:progressBar - Polling Example
example.ace.progressBarPoling.description = <p>The <b>&lt;ace:progressBar&gt;</b> supports AJAX polling. The component will \u201cpoll\u201d the application to ascertain the level of task completion and will update the progress bar to reflect the status result.  The developer can access a number of component options including the frequency of polling, start and cancel poling options and a completeListener which will fire and execute a desire action once the progress reaches completion.  The example below illustrates a progress bar using polling during a simulated image upload.  Select an image to be uploaded from the pull down menu below.  Click the upload button embedded into the rightmost column of the table and view the simple progress bar.  Notice that the Description text changes once the upload is complete.</p>
# Push
example.ace.progressBarPush.title = ace:progressBar - Push Example
example.ace.progressBarPush.description = <p>The <b>&lt;ace:progressBar&gt;</b> can be integrated with ICEfaces Push technology to reflect action status related to events being carried out by another client or thread. In the example below use start, pause (shown after progress start up) and stop buttons to control push updates from server to the progressBar.</p>
# Progress Bar on Client Side
example.ace.progressBarClientSideOnly.title = ace:progressBar - Client Side Example
example.ace.progressBarClientSideOnly.description = <p>The <b>&lt;ace:progressBar&gt;</b> can operate purely as a client side component as demonstrated below.  Click the start button below to initiate client side rendering of the progress bar, and the cancel button to terminate monitoring.</p>
#Progress Bar on Client and Server side
example.ace.progressBarClientAndServer.title =  ace:progressBar - Client&amp;Server Example
example.ace.progressBarClientAndServer.description = <p>The client side progress bar APIs can also be used in conjunction with service side listeners to reflect server based application changes by updating the client side progress bar.  In the example below, click on the Add 10% / Remove 10% buttons located below the progress bar.  The button clicks are passed up to the server application and the cumulative change in state is reflected back down to the progress bar which then updates its status accordingly.</p>

### ACE - PushButton
menu.ace.pushButton.title = ace:pushButton
menu.ace.pushButton.subMenu.title = Examples
menu.ace.pushButton.subMenu.main = Overview
# Overview
example.ace.pushButton.title = ace:pushButton - Overview
example.ace.pushButton.description = <p>The <b>&lt;ace:pushButton&gt;</b> component performs basic button functionality and can be used for executing listeners, action navigation and form submission.</p>

### ACE - Qrcode
menu.ace.qrcode.title = ace:qrcode
menu.ace.qrcode.subMenu.title = Examples
menu.ace.qrcode.subMenu.main = Overview
# Overview
example.ace.qrcode.title = ace:qrcode - Overview
example.ace.qrcode.description = <p>The <b>&lt;ace:qrcode&gt;</b> component component is used to generate QR code graphics.  The component takes a string value and returns the corresponding QR code graphic.</p>

### ACE - Resizable
menu.ace.resizable.title = ace:resizable
menu.ace.resizable.subMenu.main = Overview
menu.ace.resizable.subMenu.resizeListener = Resize Listener
# Overview
example.ace.resizable.title = ace:resizable - Overview
example.ace.resizable.description = <p>The <b>&lt;ace:resizable&gt;</b> component component is an embeddable element that when used in conjunction with other components such as input fields, panels, menus etc. will allow them to be resized.  Options allow the target component to be resized in one or two directions, and to be combined with various animations that will activate upon completion of the resizing.  In the example below, select the small triangle at the bottom of either of the panels below with the left mouse button.  Keeping the button depressed drag the mouse to resize the element.  Release the button when the desired size is reached.  The black panel is set to resize in a manner that preserves its original aspect ratio, while the white panel will resize horizontally and vertically according to preset grid sizes.</p>
# Resizable Listener
example.ace.resizableListener.title = ace:resizable - Listener Example
example.ace.resizableListener.description = <p>A listener can be attached to any resizable component which can be used to process custom server side logic.  In the example below, click and hold the small triangle in the bottom right panel corner.  Holding down the left mouse button, resize the panel.  Listeners monitoring the dimensions will fire on completion of the resize action and will advise the server application of new positioning.  The server calculates the new panel size and reflects the information by updating the text within the panel. Resize the panel below to be at least 255x235(WxH) in order to display an image in addition to the text.</p>

### ACE - RichTextEntry
menu.ace.richtextentry.title = ace:richTextEntry
menu.ace.richtextentry.subMenu.main = Overview
menu.ace.richtextentry.subMenu.title = Example
# Overview
example.ace.richtextentry.title = ace:richtextentry - Overview
example.ace.richtextentry.description = <p>The <b>&lt;ace:richTextEntry&gt;</b> component is an editor that allows users to enter and edit rich text in an application.</p>

### ACE - SelectMenu
menu.ace.selectmenu.title = ace:selectMenu
menu.ace.selectmenu.subMenu.main = Overview
menu.ace.selectmenu.subMenu.facet = Facet Rendering
menu.ace.selectmenu.subMenu.title = Example
menu.ace.selectmenu.subMenu.label = Label Position
menu.ace.selectmenu.subMenu.indicator = Indicator Text
menu.ace.selectmenu.subMenu.reqStyle = Required Styling
# Overview
example.ace.selectmenu.title = ace:selectMenu - Overview
example.ace.selectmenu.description = <p>The <b>&lt;ace:selectMenu&gt;</b> component permits selecting a value from a number of given options.
example.ace.selectmenu.facet.title = ace:selectMenu - Facet Rendering
example.ace.selectmenu.facet.description = <p>The <b>&lt;ace:selectMenu&gt;</b> component allows developers to render custom entries by using nested components.
# Label Position
example.ace.selectmenu.label.title = ace:selectMenu - Label Position
example.ace.selectmenu.label.description = <p>This example shows how to render, customize, and position an inline label for the selectMenu component.</p>
# Indicator Text
example.ace.selectmenu.indicator.title = ace:selectMenu - Indicator Text
example.ace.selectmenu.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.selectmenu.reqStyle.title = ace:selectMenu - Required Styling
example.ace.selectmenu.reqStyle.description = <p>This example shows how the selectMenu field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - SimpleSelectOneMenu
menu.ace.simpleselectonemenu.title = ace:simpleSelectOneMenu
menu.ace.simpleselectonemenu.subMenu.main = Overview
menu.ace.simpleselectonemenu.subMenu.title = Example
menu.ace.simpleselectonemenu.subMenu.label = Label Position
menu.ace.simpleselectonemenu.subMenu.indicator = Indicator Text
menu.ace.simpleselectonemenu.subMenu.reqStyle = Required Styling
# Overview
example.ace.simpleselectonemenu.title = ace:simpleSelectOneMenu - Overview
example.ace.simpleselectonemenu.description = <p>The <b>&lt;ace:simpleSelectOneMenu&gt;</b> component permits selecting a value from a number of given options, using the browser's native &lt;select&gt; element, while integrating well with the ACE environment and supporting features like Themeroller, ARIA, label positioning and &lt;ace:ajax&gt;.
# Label Position
example.ace.simpleselectonemenu.label.title = ace:simpleSelectOneMenu - Label Position
example.ace.simpleselectonemenu.label.description = <p>This example shows how to render, customize, and position an inline label for the simpleSelectOneMenu component.</p>
# Indicator Text
example.ace.simpleselectonemenu.indicator.title = ace:simpleSelectOneMenu - Indicator Text
example.ace.simpleselectonemenu.indicator.description = <p>This example shows how to customize the text of the required and optional indicator message.</p>
# Required Styling
example.ace.simpleselectonemenu.reqStyle.title = ace:simpleSelectOneMenu - Required Styling
example.ace.simpleselectonemenu.reqStyle.description = <p>This example shows how the simpleSelectOneMenu field can be customized to better indicate required or optional status beyond a simple message. In this case, the application sets some default styling for required and optional fields in their default and error states. In this example, border widths and margins are set in the default styling. Then the same CSS class name (redRS, blueRS, greenRS) can be applied to both required and optional fields to specify different colors for border, background, and text.</p>

### ACE - Slider
menu.ace.slider.title = ace:sliderEntry
menu.ace.slider.subMenu.title = Examples
menu.ace.slider.subMenu.main = Overview
menu.ace.slider.subMenu.asyncinput = Input
menu.ace.slider.subMenu.listener = Listener
menu.ace.slider.subMenu.submitionExample = Submit
# Overview
example.ace.slider.title = ace:sliderEntry - Overview
example.ace.slider.description = <p>The <b>&lt;ace:sliderEntry&gt;</b> component component is a scalable data input element.  It allows a user to enter an input value by dragging or clicking on the slider path.  The component supports a variety of features including  synchronous and asynchronous data inputs, slider range and gradients as well as fixed minimum and maximum  values.  Click the slider box and drag it along the bar to the left or right.  Release the slider at the desire location and view the value update in the example below.</p>
# Ansynchronous Input
example.ace.slider.asyncinput.title = ace:sliderEntry - Input Example
example.ace.slider.asyncinput.description = <p>The example below illustrates <b>&lt;ace:sliderEntry&gt;</b> functionality in asynchronous input mode. To operate the demo below, input any number from 0 to 99 in the text entry box located beneath the slider. Hit the enter or return key and the slider will automatically re-position itself to the new value.</p>
# Listener
example.ace.slider.listener.title = ace:sliderEntry - Listener Example
example.ace.slider.listener.description = <p>The example below illustrates <b>&lt;ace:sliderEntry&gt;</b> value change listener functionality. To operate the demo, drag slider to change its position. With each slider switch a circuit on the server side recalculates a new value via listener and either power the bulb ON or turn it OFF.</p>
#Submit Examples
example.ace.slider.submition.title = ace:sliderEntry - Submit Example
example.ace.slider.submition.description =<p>The example below illustrates <b>&lt;ace:sliderEntry&gt;</b> submit functionality in basic and AJAX mode. To operate \u201cBasic Slider\u201d demo, click the slider rail or drag the slider to a new position. Once done push Set Slider Value button in order to update the value located above it. For \u201cAJAX Slider\u201d demo just click the rail or drag the slider to a new position. Notice how corresponding value is updated automatically each time you move the slider.</p>

### ACE - SplitPane
menu.ace.splitpane.title = ace:splitPane
menu.ace.splitpane.subMenu.title = Examples
menu.ace.splitpane.subMenu.main = Overview
# Overview
example.ace.splitpane.title = ace:splitPane - Overview
example.ace.splitpane.description = <p>The <b>&lt;ace:splitPane&gt;</b> component renders a div with two child containers, side by side. It can be scrollable and have column divider at a specified point.

### ACE - SubmitMonitor
menu.ace.submitMonitor.title = ace:submitMonitor
menu.ace.submitMonitor.subMenu.title = Examples
menu.ace.submitMonitor.subMenu.main = Overview
# Overview
example.ace.submitMonitor.title = ace:submitMonitor - Overview
example.ace.submitMonitor.description = <p>The <b>&lt;ace:submitMonitor&gt;</b> component is used to display \
  the status of the browser's connection with the server, whether it is currently idle, actively \
  processing a submission, experiencing a network or server error, or if the session has expired.</p> \
  <p>When a long duration submission is underway, the submitMonitor may block configurable portions of the \
  user interface, to prevent users from further interacting with the page until the results of their \
  submission have been returned, and the user interface has been updated. This can be used to enforce a \
  consistent state.</p> \
  <p>For each connection status that the submitMonitor can display, it's representation is customisable. \
  By default an image is shown, and a label property can be specified as well, or, alternatively, a facet \
  may be used to completely customise the representation. All of which can be styled with CSS.</p> \
  <p>Multiple submitMonitor components may exist on the page, each listening to submissions from components \
  in different regions of the page. This way, each submitMonitor may be customised to best inform the user \
  of the submission status of the particular component(s).</p>

### ACE - TabSet
menu.ace.tabSet.title = ace:tabSet
menu.ace.tabSet.subMenu.title = Examples
menu.ace.tabSet.subMenu.main = Overview
menu.ace.tabSet.subMenu.clientSide = Client Side
menu.ace.tabSet.subMenu.serverSide = Server Side
menu.ace.tabSet.subMenu.proxy = Proxy
# Overview
example.ace.tabSet.title = ace:tabSet - Overview
example.ace.tabSet.description = <p>The <b>&lt;ace:tabSet&gt;</b> component allows page content to be loaded into separate panels or \u201ctabs\u201d that can be viewed one at a time. The tabs can be stored in the client side browser to latency in viewing or on a server to reduce initial bandwidth and start up times.  The ace:tabSet component is highly versatile and can be run from within a larger form or can contain its own forms, tables etc.  Tab labels and formats are all fully programmable.  Example below demonstrates basic ace:tabSet functionality with the tabs being hosted server-side.  Select any tab to view its content.</p>
# Client Side
example.ace.tabSet.clientSide.title = ace:tabSet - Client Side Example
example.ace.tabSet.clientSide.description = <p>In the example below, the tab content of the <b>&lt;ace:tabSet&gt;</b> component is kept loaded within the client browser.  This eliminates any unnecessary data transfer between the server and the client when the tab views are changed, speeding up the view times.  Click through the three tabs to view the content that has been retained inside the client browser.</p>
# Server Side
example.ace.tabSet.serverSide.title = ace:tabSet - Server Side Example
example.ace.tabSet.serverSide.description  = <p>In the example below, the tab content is maintained on the server.  Initial data transfer is less (meaning initial rendering times are faster)  and the memory footprint on the client is minimized, but the content requires transfer from the server every time a tab view is changed.</p>
# Proxy
example.ace.tabSet.proxy.title = ace:tabSet - Proxy Example
example.ace.tabSet.proxy.description = <p>The example below demonstrates the <b>&lt;ace:tabSet&gt;</b> component operating with a tabSetProxy feature enabled.  This feature allows the various tabs to contain their own forms and facilitates tab to tab communication and state changes through the server.  In this mode, updates in one tab can generate new content that will be reflected in the other tab elements.  In the example below click on the Text Entry tab and enter some text content in the input field.  Hit enter or return.  Click the Confirmation tab to view and confirm the content from the previous tab. Finally click the Outcome tab to view the accepted change of state.</p>

### ACE - ThemeSelect
menu.ace.themeSelect.title = ace:themeSelect
menu.ace.themeSelect.subMenu.title = Examples
menu.ace.themeSelect.subMenu.main = Overview
# Overview
example.ace.themeSelect.title = ace:themeSelect - Overview
example.ace.themeSelect.description = <p>The <b>&lt;ace:themeSelect&gt;</b> </p>

### ACE - Tooltip
menu.ace.tooltip.title = ace:tooltip
menu.ace.tooltip.subMenu.title = Examples
menu.ace.tooltip.subMenu.main = Overview
menu.ace.tooltip.subMenu.globalTooltip = Global
menu.ace.tooltip.subMenu.delegateTooltip = Delegate
# Overview
example.ace.tooltip.title = ace:tooltip - Overview
example.ace.tooltip.description = <p>The <b>&lt;ace:tooltip&gt;</b> is a graphical user interface element used in conjunction with a cursor or a mouse pointer. When the user hovers the mouse over a selected page region or component, a window appears containing related information or content.  The ace:tooltip supports a variety of animations which can be activated as the tooltip appears or is hidden, delay times governing how long the hover must occur before the tool tip appears, as well as its position and appearance.  In the example below, select the programmable tooltip options from the pull down menus below. Hover the cursor over the text boxes below to view the tooltip.</p>
# Global
example.ace.globalTooltip.title = ace:tooltip - Global Tooltip Example
example.ace.globalTooltip.description = <p>The <b>&lt;ace:tooltip&gt;</b> component supports a global mode of operation. When this feature is activated, it allows the ace:tooltip to override any title attributes or default tooltip with a commonly formatted ace:tooltip solution.   In the example below hover over the various active components to display a common tooltip operation.</p>
# Delegate
example.ace.delegateTooltip.title = ace:tooltip - Delegate Tooltip Example
example.ace.delegateTooltip.description = <p>The <b>&lt;ace:tooltip&gt;</b> component supports delegate events, which allow developers to only apply one tooltip component to an entire table or iterative container, rather than applying one tooltip component per row. This increases performance on the page substantially. As you can see in this demo, the <b>&lt;ace:tooltip&gt;</b> component is defined outside the table. You can hover over the names of the cars to see specific data for that car, in the tooltip. The contents of the tooltip are updated dynamically just before displaying it, using row-specific data.</p>

### ACE - Tree
menu.ace.tree.title = ace:tree
menu.ace.tree.subMenu.title = Examples
menu.ace.tree.subMenu.main = Overview
menu.ace.tree.subMenu.nested = Nested
menu.ace.tree.subMenu.client = Client
menu.ace.tree.subMenu.lazy = Lazy Loading
menu.ace.tree.subMenu.reorder = Drag / Drop
menu.ace.tree.subMenu.selection = Selection
# Overview
example.ace.tree.title = ace:tree - Overview
example.ace.tree.description = The <b>ace:tree</b> is a component for displaying a hierarchy of objects. The component supports many features including: lazy loading, client/server selection modes, client/server subnode expansion modes, node reordering, state initialization callback, ajax behaviours and multiple node template support.
example.ace.tree.nested.title = ace:tree - Nested Trees
example.ace.tree.nested.description =
example.ace.tree.client.title = ace:tree - Client Mode Selection / Expansion
example.ace.tree.client.description = The components below demonstrate the client expansion and selection modes.
example.ace.tree.lazy.title = ace:tree - Lazy Loading
example.ace.tree.lazy.description = The components below demonstrate  the Lazy Loading capabilities of the ace:tree. The loadChildrenForNode method of the LazyDataModel is called only when the sub-nodes of a Node are first displayed. Thereafter they are kept cached by the LazyDataModel and can be cleared from the cache using a supplied API as needed.
example.ace.tree.selection.title = ace:tree - Node Selection
example.ace.tree.selection.description = The components below demonstrate the selection capabilities of the ace:tree.
example.ace.tree.reorder.title = ace:tree - Node Dragging
example.ace.tree.reorder.description = The components below demonstrate the reordering capabilities of the ace:tree.

### ACE - List
menu.ace.list.title = ace:list
menu.ace.list.subMenu.title = Examples
menu.ace.list.subMenu.main = Overview
menu.ace.list.subMenu.block = Simple Block Object
menu.ace.list.subMenu.blockComplex = Complex Block Object
menu.ace.list.subMenu.selection = Selection
menu.ace.list.subMenu.selectionAjax = Selection (Ajax)
menu.ace.list.subMenu.selectionMini = Selection (Compact)
menu.ace.list.subMenu.reordering = Reordering
menu.ace.list.subMenu.reorderingAjax = Reordering (Ajax)
menu.ace.list.subMenu.drag = Drag & Drop
menu.ace.list.subMenu.dual = Dual List
menu.ace.list.subMenu.multi = Multi List
# Overview
example.ace.list.title = ace:list - Overview
example.ace.list.description = <p>Two examples using many of the features available on ace:list.</p>
# Simple Block Object
example.ace.list.block.title = ace:list - Simple Block Object
example.ace.list.block.description = <p>Simple examples of block layout.</p>
# Complex Block Object
example.ace.list.blockComplex.title = ace:list - Complex Block Object
example.ace.list.blockComplex.description = <p>Complex example of a floating block object multi list.</p>
# Reordering
example.ace.list.reorder.title = ace:list - Reordering
example.ace.list.reorder.description = <p>Simple example of reordering using the reorder controls, with dragging disabled.</p>
# Reordering (Ajax)
example.ace.list.reorderAjax.title = ace:list - Reordering (Ajax)
example.ace.list.reorderAjax.description = <p>Simple example of reordering using the reorder controls, with dragging disabled. The submission of the reorder is done automatically using Ajax.</p>
# Drag & Drop
example.ace.list.drag.title = ace:list - Drag & Drop
example.ace.list.drag.description = <p>Simple examples of drag and drop, to reorder items in a list and to migrate between lists.</p>
# Dual List
example.ace.list.dual.title = ace:list - Dual List
example.ace.list.dual.description = <p><Simple example of the listControl dual list mode./p>
# Multi
example.ace.list.multi.title = ace:list - Multi
example.ace.list.multi.description = <p>Simple example of the listControl n-list mode.</p>
# Selection
example.ace.list.selection.title = ace:list - Selection
example.ace.list.selection.description = <p>Simple example of list item selection.</p>
# Selection (Ajax)
example.ace.list.selectionAjax.title = ace:list - Selection (Ajax)
example.ace.list.selectionAjax.description = <p>Simple example of list item selection using Ajax.</p>
# Selection (Mini)
example.ace.list.selectionMini.title = ace:list - Selection (Compact)
example.ace.list.selectionMini.description = <p>A selection example using f:selectItems as an ace:list model along with 'compact' mode styling. <br/><br/> Note that when f:selectItem(s) children are used as the model to this ace:list that selections are instead added to the Collection bound to the value attribute, to more closely emulate the h:selectManyListbox component. Also reordering and migrations of an f:selectItem(s)-backed list are not allowed, since f:selecItem(s) are not an editable collection.</p>

### ACE - Chart
menu.ace.chart.title = ace:chart
menu.ace.chart.subMenu.title = Examples
menu.ace.chart.subMenu.main = Overview
menu.ace.chart.subMenu.combined = Combined
menu.ace.chart.subMenu.pie = Pie
menu.ace.chart.subMenu.donut = Donut
menu.ace.chart.subMenu.candlestick = Candlestick
menu.ace.chart.subMenu.dynamic = Dynamic
menu.ace.chart.subMenu.bubble = Bubble
menu.ace.chart.subMenu.gauge = Gauge
menu.ace.chart.subMenu.export = Export
menu.ace.chart.subMenu.bar = Bar
menu.ace.chart.subMenu.line = Line
menu.ace.chart.subMenu.color = Custom Color

# Overview
example.ace.chart.title = ace:chart - Overview
example.ace.chart.description = <p>The chart component can be used to display data in a variety of forms and styles.</p>
# Bar
example.ace.chart.bar.sample_title = Dynamic manipulation of default model values for a Horizontal Bar Chart
example.ace.chart.bar.barWidth = Bar Width (0 uses default width):-
example.ace.chart.bar.colorOption = Color Options for Bar Graph:-
example.ace.chart.bar.stackSeries = StackSeries (will not use varyBarColor):-

example.ace.chart.color.description = Custom colors can be set on the chart object, as well as the defaultSeriesConfig or the Series object itself. If more series are used than colors in the set of custom colors, the colors will be reused based on the order they occur in the set of customColors.
# Combined Chart
example.ace.chart.combined.title = ace:chart - Combined Chart
example.ace.chart.combined.description = <p>The chart component can combine different styles of charts together to display complex data in a unique fashion.</p>
# Pie Chart
example.ace.chart.pie.title = ace:chart - Pie Chart
example.ace.chart.pie.description = <p>The chart component can render data in a standard pie chart.</p>
# Donut Chart
example.ace.chart.donut.title = ace:chart - Donut Chart
example.ace.chart.donut.description = <p>The chart component can render data in a donut chart.</p>
# Candlestick Chart
example.ace.chart.candlestick.title = ace:chart - Candlestick Chart
example.ace.chart.candlestick.description = <p>The chart component can render data in a candlestick chart.</p>
# Dynamic Chart
example.ace.chart.dynamic.title = ace:chart - Dynamic Chart
example.ace.chart.dynamic.description = <p>The chart component can dynamically generate charts from changing data or conditions, such as a user clicking on a row in a dataTable.</p>
# Bubble Chart
example.ace.chart.bubble.title = ace:chart - Bubble Chart
example.ace.chart.bubble.description = <p>The chart component can render one or more series of 'bubble' points with specific areas.</p>
# Gauge Chart
example.ace.chart.gauge.title = ace:chart - Gauge Chart
example.ace.chart.gauge.description =  <p>The chart component can render one value point on a analog-style 'gauge' with configurable intervals and sizing.</p>
# Export Chart
example.ace.chart.export.title = ace:chart - Export Chart
example.ace.chart.export.description =  <p>The chart component can export itself as a PNG image via an img tag using the JavaScript api. Note that this is unavailable in IE 7 and 8 due limitations of the compatibility technology used to enabled charting on those browsers.</p>
# Export Chart
example.ace.chart.line.title = ace:chart - Line Chart
example.ace.chart.line.description =  <p>The chart component can render data in a line chart.</p>
# Export Chart
example.ace.chart.bar.title = ace:chart - Bar Chart
example.ace.chart.bar.description =  <p>The chart component can render data in a bar chart in either vertical or horizontal orientation.  Values for barWidth, stackSeries and color are manipulated in this particular example.</p>

### ACE - GMap
menu.ace.gMap.title = ace:gMap
menu.ace.gMap.subMenu.title = ace:gMap
menu.ace.gMap.subMenu.overview = Overview
menu.ace.gMap.subMenu.options = Map Options
#Overview
example.ace.gMap.overview.title = ace:gMap Overview
example.ace.gMap.overview.description = An overview of a basic ace:gMap. This includes setting the latitude/longitude points for the map to center on, determining the zoom and map type, and forcing the map to center on a given address.
#Options
example.ace.gMap.options.title = Basic Map Options
example.ace.gMap.options.description = <p>A demo demonstrating the flexibility inherent in a basic <b>&lt;ace:gMap&gt;</b>, using nothing more than the default options attribute.</p>

### ACE - GMapAutoComplete
menu.ace.gMapAutoComplete.title = ace:gMapAutoComplete
menu.ace.gMapAutoComplete.subMenu.title = Examples
menu.ace.gMapAutoComplete.subMenu.main = Overview
# Overview
example.ace.gMapAutoComplete.title = ace:gMapAutoComplete - Overview
example.ace.gMapAutoComplete.description = <p><b>&lt;ace:gMapAutocomplete&gt;</b> allows for users to tap into the Google Autocomplete database, automatically zooming and recentering when a location is chosen from the dropdown menu created.</p>

### ACE - GMapControl
menu.ace.gMapControl.title = ace:gMapControl
menu.ace.gMapControl.subMenu.title = Examples
menu.ace.gMapControl.subMenu.main = Overview
# Overview
example.ace.gMapControl.title = ace:gMapControl - Overview
example.ace.gMapControl.description = <p><b>&lt;ace:gMapControl&gt;</b> gives the user an easier method to access the various control options that are available in Google maps.</p>

### ACE - GMapEvent
menu.ace.gMapEvent.title = ace:gMapEvent
menu.ace.gMapEvent.subMenu.title = Examples
menu.ace.gMapEvent.subMenu.main = Overview
# Overview
example.ace.gMapEvent.title = ace:gMapEvent - Overview
example.ace.gMapEvent.description = <p><b>&lt;ace:gMapEvent&gt;</b> allows for users to tap into Google's event handling capabilities and execute a chosen javascript on a variety of triggers. The variable 'map' can be used to affect the parent map and 'component' can be used to reference the parent component.</p>

### ACE - GMapInfoWindow
menu.ace.gMapInfoWindow.title = ace:gMapInfoWindow
menu.ace.gMapInfoWindow.subMenu.title = Examples
menu.ace.gMapInfoWindow.subMenu.main = Overview
# Overview
example.ace.gMapInfoWindow.title = ace:gMapInfoWindow - Overview
example.ace.gMapInfoWindow.description = <p><b>&lt;ace:gMapInfowindow&gt;</b> allows for users to create a window in the parent google map to desplay text, html, or other JSF components.</p>

### ACE - GMapLayer
menu.ace.gMapLayer.title = ace:gMapLayer
menu.ace.gMapLayer.subMenu.title = Examples
menu.ace.gMapLayer.subMenu.main = Overview
# Overview
example.ace.gMapLayer.title = ace:gMapLayer - Overview
example.ace.gMapLayer.description = <p><b>&lt;ace:gMapLayer&gt;</b> allows for the introduction of a premade map layer into the gMap element. These layers can vary from showing traffic and highlighting desired paths to complex and specific displays defined by outside KML files.</p>

### ACE - GMapMarker
menu.ace.gMapMarker.title = ace:gMapMarker
menu.ace.gMapMarker.subMenu.title = Examples
menu.ace.gMapMarker.subMenu.main = Overview
# Overview
example.ace.gMapMarker.title = ace:gMapMarker - Overview
example.ace.gMapMarker.description = <p><b>&lt;ace:gMapMarker&gt;</b> allows for the placement of a marker pin on the map of your choice. This pin is highly customizable, and can be used to show a wide variety of information via user made icons and titles</p> 

### ACE - GMapOverlay
menu.ace.gMapOverlay.title = ace:gMapOverlay
menu.ace.gMapOverlay.subMenu.title = Examples
menu.ace.gMapOverlay.subMenu.main = Overview
# Overview
example.ace.gMapOverlay.title = ace:gMapOverlay - Overview
example.ace.gMapOverlay.description = <p><b>&lt;ace:gMapOverlay&gt;</b> allows for users to define their own shapes on a gMap.</p>

### ACE - GMapServices
menu.ace.gMapServices.title = ace:gMapServices
menu.ace.gMapServices.subMenu.title = Examples
menu.ace.gMapServices.subMenu.main = Overview
# Overview
example.ace.gMapServices.title = ace:gMapServices - Overview
example.ace.gMapServices.description = <p>Directions are a subset of the <b>&lt;ace:gMapService&gt;</b> component, allowing for the display of directions using multiple forms of transport over a user-defined set of waypoints. Additionally, a variety of options can be added to better customize directional output for your purpses.</p>

### ACE - VideoPlayer
menu.ace.videoPlayer.title = ace:videoPlayer
menu.ace.videoPlayer.subMenu.title = Examples
menu.ace.videoPlayer.subMenu.main = Overview
# Overview
example.ace.videoPlayer.title = ace:videoPlayer - Overview
example.ace.videoPlayer.description = <p>The <b>&lt;ace:videoPlayer&gt;</b> </p>

################################################################################
# UNUSED messages
################################################################################

### ACE - Logger (INACTIVE)
menu.ace.logger.title = Logger
menu.ace.logger.subMenu.title = Examples
menu.ace.logger.subMenu.main = Overview
# Overview
example.ace.logger.title = Logger Component
example.ace.logger.description = <p>The ACE Logger component is based around the one offered by the YUI toolkit, providing a standardized way of reading and writing log messages. When the tag is present on the page it adds divs containing the log controls to the root of the DOM. In this example, to prevent root placement from breaking page flow, the class .yui-log-container is positioned to fixed values similarly to a popup. The logs will have a record for every Javascript call to YAHOO.log().</p><p>The example below has a button to display the logger and some example controls to generate arbitrary Javascript messages using YAHOO.log().</p>

### ACE - Button
menu.ace.button.title = Buttons
menu.ace.button.subMenu.title = Examples
menu.ace.button.subMenu.main = Overview
# Overview
example.ace.button.title = ACE Button Components
example.ace.button.description = <p>The ACE Button Components provide the functionality of the standard JSF implementations while integrating ICEfaces features such as Single Submit. Buttons can be used for:</p><p>1. Action navigation via the application NavigationController and the "action" attribute.<br/>2. Presenting a clickable UI control for a listener<br/>3. Performing a full form submission.<br></p><p>Below is a example of each button configured as the control for a simple listener.</p>


################################################################################
# Mobile Components (MOBI)                                                     #
################################################################################

### MOBI - Overview
menu.mobi.mobiOverview.title = MOBI Overview
menu.mobi.mobiOverview.subMenu.title = Examples
menu.mobi.mobiOverview.subMenu.main = Overview
# Overview
example.mobi.mobiOverview.title = MOBI Overview
example.mobi.mobiOverview.description = <h2>What are the MOBI Components?</h2><p>The MOBI Components (ICEfaces Mobile Components) are specifically tailored for use on mobile devices. The components automatically adapt to the clients accessing them, delivering device-specific styling and optimized markup for each supported device type. Central to this is a device detection and rendering mechanism that serves the appropriated CSS resources, and optimizes the markup of each control to match the capabilities and idiosyncrasies of each device type. A wide range of components are available including:<ul><li>Layout and Navigation Controls for adaptive page layout and navigation</li><li>Input and Selection Controls for handling user input using native HTML5 mobile input controls</li><li>Native Controls for accessing device capabilities like camera, camcorder, and microphone (via the BridgeIt app)</li></ul></p><h2>When should I use the MOBI Components?</h2><p>The MOBI Components are recommended under the following circumstances:<br><ul><li><b>&#187;</b> Legacy Browser Support. The ICE Components are ideally suited for projects that are required to support older legacy browsers, such as Internet Explorer 6 / 7. These browsers have significantly less efficient JavaScript processing engines, effectively preventing them from supporting most contemporary JavaScript libraries. The ICE Components can provide good performance on older browsers due to their reliance on predominantly server-side rendering and processing techniques.</li><li><b>&#187;</b> Application Migration. The ICE Components are tag-compatible with the ICEfaces 1.x Component Suite. This greatly simplifies the migration of ICEfaces 1.x applications to more recent versions of ICEfaces.<br></li><li><b>&#187;</b> Specialized Applications. Some projects with specific accessibility or security requirements may be required to minimize client-side JavaScript rendering and data-processing. In these cases, the ICE Components may be better suited to meet those requirements.</li></ul></p><h2>Can I use the ICE Components with the ACE Components?</h2><p>Yes! It is possible to mix both ICE and ACE components as needed in the same ICEfaces application, or even in the same page (with some limitations).</p><h2>How are the ICE Components Licensed?</h2><p>The ICE Components are made available under the Apache License Version 2 open source License. All code modifications and component enhancements are free for developers to use, distribute, and modify.</p><h2>How can I find out more about the components?</h2><p>The component samples included in this ICEfaces Showcase application include source code for each sample, located at the bottom of each page. In addition, links to technical documentation and the component TLD documentation are provided on the right-hand side menu on the header bar for each sample.</p><br><p>The complete source code for this sample application is included in the <a href="http://www.icesoft.org/java/downloads/icefaces-downloads.jsf" style="text-decoration: underline;" target="_blank" >ICEfaces release bundle</a>.</p>


